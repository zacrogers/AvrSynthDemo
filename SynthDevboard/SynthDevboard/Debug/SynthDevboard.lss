
SynthDevboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  0000174a  000017de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000174a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000017a  00800146  00800146  00001824  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001824  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001854  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b0  00000000  00000000  00001894  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004a7c  00000000  00000000  00001b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001881  00000000  00000000  000065c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001422  00000000  00000000  00007e41  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000810  00000000  00000000  00009264  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000104e  00000000  00000000  00009a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001cba  00000000  00000000  0000aac2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  0000c77c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 85 00 	jmp	0x10a	; 0x10a <__ctors_end>
       4:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
       8:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
       c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      10:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      14:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      18:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      1c:	0c 94 b9 02 	jmp	0x572	; 0x572 <__vector_7>
      20:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      24:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      28:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      2c:	0c 94 0e 02 	jmp	0x41c	; 0x41c <__vector_11>
      30:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      34:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      38:	0c 94 c9 01 	jmp	0x392	; 0x392 <__vector_14>
      3c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      40:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      44:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      48:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      4c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      50:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      54:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      58:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      5c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      60:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      64:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	05 a8       	ldd	r0, Z+53	; 0x35
      92:	4c cd       	rjmp	.-1384   	; 0xfffffb2c <__eeprom_end+0xff7efb2c>
      94:	b2 d4       	rcall	.+2404   	; 0x9fa <_GLOBAL__sub_I__Z3maplllll+0xb4>
      96:	4e b9       	out	0x0e, r20	; 14
      98:	38 36       	cpi	r19, 0x68	; 104
      9a:	a9 02       	muls	r26, r25
      9c:	0c 50       	subi	r16, 0x0C	; 12
      9e:	b9 91       	ld	r27, Y+
      a0:	86 88       	ldd	r8, Z+22	; 0x16
      a2:	08 3c       	cpi	r16, 0xC8	; 200
      a4:	a6 aa       	std	Z+54, r10	; 0x36
      a6:	aa 2a       	or	r10, r26
      a8:	be 00       	.word	0x00be	; ????
      aa:	00 00       	nop
      ac:	80 3f       	cpi	r24, 0xF0	; 240
      ae:	08 00       	.word	0x0008	; ????
      b0:	00 00       	nop
      b2:	be 92       	st	-X, r11
      b4:	24 49       	sbci	r18, 0x94	; 148
      b6:	12 3e       	cpi	r17, 0xE2	; 226
      b8:	ab aa       	std	Y+51, r10	; 0x33
      ba:	aa 2a       	or	r10, r26
      bc:	be cd       	rjmp	.-1156   	; 0xfffffc3a <__eeprom_end+0xff7efc3a>
      be:	cc cc       	rjmp	.-1640   	; 0xfffffa58 <__eeprom_end+0xff7efa58>
      c0:	4c 3e       	cpi	r20, 0xEC	; 236
      c2:	00 00       	nop
      c4:	00 80       	ld	r0, Z
      c6:	be ab       	std	Y+54, r27	; 0x36
      c8:	aa aa       	std	Y+50, r10	; 0x32
      ca:	aa 3e       	cpi	r26, 0xEA	; 234
      cc:	00 00       	nop
      ce:	00 00       	nop
      d0:	bf 00       	.word	0x00bf	; ????
      d2:	00 00       	nop
      d4:	80 3f       	cpi	r24, 0xF0	; 240
      d6:	00 00       	nop
      d8:	00 00       	nop
      da:	00 08       	sbc	r0, r0
      dc:	41 78       	andi	r20, 0x81	; 129
      de:	d3 bb       	out	0x13, r29	; 19
      e0:	43 87       	std	Z+11, r20	; 0x0b
      e2:	d1 13       	cpse	r29, r17
      e4:	3d 19       	sub	r19, r13
      e6:	0e 3c       	cpi	r16, 0xCE	; 206
      e8:	c3 bd       	out	0x23, r28	; 35
      ea:	42 82       	std	Z+2, r4	; 0x02
      ec:	ad 2b       	or	r26, r29
      ee:	3e 68       	ori	r19, 0x8E	; 142
      f0:	ec 82       	std	Y+4, r14	; 0x04
      f2:	76 be       	out	0x36, r7	; 54
      f4:	d9 8f       	std	Y+25, r29	; 0x19
      f6:	e1 a9       	ldd	r30, Z+49	; 0x31
      f8:	3e 4c       	sbci	r19, 0xCE	; 206
      fa:	80 ef       	ldi	r24, 0xF0	; 240
      fc:	ff be       	out	0x3f, r15	; 63
      fe:	01 c4       	rjmp	.+2050   	; 0x902 <main+0xc8>
     100:	ff 7f       	andi	r31, 0xFF	; 255
     102:	3f 00       	.word	0x003f	; ????
     104:	00 00       	nop
	...

00000108 <__ctors_start>:
     108:	a3 04       	cpc	r10, r3

0000010a <__ctors_end>:
     10a:	11 24       	eor	r1, r1
     10c:	1f be       	out	0x3f, r1	; 63
     10e:	cf ef       	ldi	r28, 0xFF	; 255
     110:	d4 e0       	ldi	r29, 0x04	; 4
     112:	de bf       	out	0x3e, r29	; 62
     114:	cd bf       	out	0x3d, r28	; 61

00000116 <__do_copy_data>:
     116:	11 e0       	ldi	r17, 0x01	; 1
     118:	a0 e0       	ldi	r26, 0x00	; 0
     11a:	b1 e0       	ldi	r27, 0x01	; 1
     11c:	ea e4       	ldi	r30, 0x4A	; 74
     11e:	f7 e1       	ldi	r31, 0x17	; 23
     120:	02 c0       	rjmp	.+4      	; 0x126 <__do_copy_data+0x10>
     122:	05 90       	lpm	r0, Z+
     124:	0d 92       	st	X+, r0
     126:	a6 34       	cpi	r26, 0x46	; 70
     128:	b1 07       	cpc	r27, r17
     12a:	d9 f7       	brne	.-10     	; 0x122 <__do_copy_data+0xc>

0000012c <__do_clear_bss>:
     12c:	22 e0       	ldi	r18, 0x02	; 2
     12e:	a6 e4       	ldi	r26, 0x46	; 70
     130:	b1 e0       	ldi	r27, 0x01	; 1
     132:	01 c0       	rjmp	.+2      	; 0x136 <.do_clear_bss_start>

00000134 <.do_clear_bss_loop>:
     134:	1d 92       	st	X+, r1

00000136 <.do_clear_bss_start>:
     136:	a0 3c       	cpi	r26, 0xC0	; 192
     138:	b2 07       	cpc	r27, r18
     13a:	e1 f7       	brne	.-8      	; 0x134 <.do_clear_bss_loop>

0000013c <__do_global_ctors>:
     13c:	10 e0       	ldi	r17, 0x00	; 0
     13e:	c5 e8       	ldi	r28, 0x85	; 133
     140:	d0 e0       	ldi	r29, 0x00	; 0
     142:	04 c0       	rjmp	.+8      	; 0x14c <__do_global_ctors+0x10>
     144:	21 97       	sbiw	r28, 0x01	; 1
     146:	fe 01       	movw	r30, r28
     148:	0e 94 8e 0b 	call	0x171c	; 0x171c <__tablejump2__>
     14c:	c4 38       	cpi	r28, 0x84	; 132
     14e:	d1 07       	cpc	r29, r17
     150:	c9 f7       	brne	.-14     	; 0x144 <__do_global_ctors+0x8>
     152:	0e 94 1d 04 	call	0x83a	; 0x83a <main>
     156:	0c 94 a3 0b 	jmp	0x1746	; 0x1746 <_exit>

0000015a <__bad_interrupt>:
     15a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000015e <_ZN5z_lib4AdsrC1Ehhhh>:
 */ 
#include "adsr.h"

namespace z_lib
{
	Adsr::Adsr(uint8_t a, uint8_t d, uint8_t s, uint8_t r)
     15e:	0f 93       	push	r16
     160:	fc 01       	movw	r30, r24
	{
		this->a        = a;
     162:	60 83       	st	Z, r22
		this->d        = d;
     164:	41 83       	std	Z+1, r20	; 0x01
		this->s        = s;
     166:	22 83       	std	Z+2, r18	; 0x02
		this->r        = r;
     168:	03 83       	std	Z+3, r16	; 0x03
		
		tick           = 0;
     16a:	14 82       	std	Z+4, r1	; 0x04
		curr_amplitude = MIN_AMPLITUDE;
     16c:	15 82       	std	Z+5, r1	; 0x05
		curr_state     = State::INIT;
     16e:	17 82       	std	Z+7, r1	; 0x07
     170:	16 82       	std	Z+6, r1	; 0x06
	}
     172:	0f 91       	pop	r16
     174:	08 95       	ret

00000176 <_ZN5z_lib7Encoder14read_gray_codeEv>:
		
		this ->gray_val = read_gray_code();
	}
	
	uint8_t Encoder::read_gray_code(void)
	{
     176:	0f 93       	push	r16
     178:	1f 93       	push	r17
     17a:	cf 93       	push	r28
     17c:	8c 01       	movw	r16, r24
		uint8_t val = 0;
		
		if (pin1->read())
     17e:	fc 01       	movw	r30, r24
     180:	80 81       	ld	r24, Z
     182:	91 81       	ldd	r25, Z+1	; 0x01
     184:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_ZN5z_lib4Gpio4readEv>
     188:	88 23       	and	r24, r24
     18a:	11 f0       	breq	.+4      	; 0x190 <_ZN5z_lib7Encoder14read_gray_codeEv+0x1a>
		{
			val |= (1 << 1);
     18c:	c2 e0       	ldi	r28, 0x02	; 2
     18e:	01 c0       	rjmp	.+2      	; 0x192 <_ZN5z_lib7Encoder14read_gray_codeEv+0x1c>
		this ->gray_val = read_gray_code();
	}
	
	uint8_t Encoder::read_gray_code(void)
	{
		uint8_t val = 0;
     190:	c0 e0       	ldi	r28, 0x00	; 0
		
		if (pin1->read())
		{
			val |= (1 << 1);
		}
		if (pin2->read())
     192:	f8 01       	movw	r30, r16
     194:	82 81       	ldd	r24, Z+2	; 0x02
     196:	93 81       	ldd	r25, Z+3	; 0x03
     198:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_ZN5z_lib4Gpio4readEv>
     19c:	81 11       	cpse	r24, r1
		{
			val |= (1 << 0);
     19e:	c1 60       	ori	r28, 0x01	; 1
		}
		return val;
	}
     1a0:	8c 2f       	mov	r24, r28
     1a2:	cf 91       	pop	r28
     1a4:	1f 91       	pop	r17
     1a6:	0f 91       	pop	r16
     1a8:	08 95       	ret

000001aa <_ZN5z_lib7EncoderC1EPNS_4GpioES2_hh>:

#include "encoder.h"

namespace z_lib
{
	Encoder::Encoder(Gpio *pin1, Gpio *pin2, uint8_t min, uint8_t max)
     1aa:	0f 93       	push	r16
     1ac:	cf 93       	push	r28
     1ae:	df 93       	push	r29
     1b0:	ec 01       	movw	r28, r24
	{
		this->pin1 = pin1;
     1b2:	79 83       	std	Y+1, r23	; 0x01
     1b4:	68 83       	st	Y, r22
		this->pin2 = pin2;
     1b6:	5b 83       	std	Y+3, r21	; 0x03
     1b8:	4a 83       	std	Y+2, r20	; 0x02
		
		this->min_val = min;
     1ba:	2c 83       	std	Y+4, r18	; 0x04
		this->max_val = max;
     1bc:	0d 83       	std	Y+5, r16	; 0x05
		
		this->count = 0;
     1be:	1e 82       	std	Y+6, r1	; 0x06
		
		this ->gray_val = read_gray_code();
     1c0:	0e 94 bb 00 	call	0x176	; 0x176 <_ZN5z_lib7Encoder14read_gray_codeEv>
     1c4:	8f 83       	std	Y+7, r24	; 0x07
	}
     1c6:	df 91       	pop	r29
     1c8:	cf 91       	pop	r28
     1ca:	0f 91       	pop	r16
     1cc:	08 95       	ret

000001ce <_ZN5z_lib7Encoder4readEv>:
		}
		return val;
	}
	
	uint8_t Encoder::read()
	{
     1ce:	cf 93       	push	r28
     1d0:	df 93       	push	r29
     1d2:	ec 01       	movw	r28, r24
		gray_val_tmp = read_gray_code();
     1d4:	0e 94 bb 00 	call	0x176	; 0x176 <_ZN5z_lib7Encoder14read_gray_codeEv>
     1d8:	88 87       	std	Y+8, r24	; 0x08
		
		if(gray_val != gray_val_tmp)
     1da:	9f 81       	ldd	r25, Y+7	; 0x07
     1dc:	89 17       	cp	r24, r25
     1de:	01 f1       	breq	.+64     	; 0x220 <_ZN5z_lib7Encoder4readEv+0x52>
		{
			if((gray_val==3 && gray_val_tmp==1) || (gray_val==0 && gray_val_tmp==2))
     1e0:	93 30       	cpi	r25, 0x03	; 3
     1e2:	19 f4       	brne	.+6      	; 0x1ea <_ZN5z_lib7Encoder4readEv+0x1c>
     1e4:	81 30       	cpi	r24, 0x01	; 1
     1e6:	d9 f4       	brne	.+54     	; 0x21e <_ZN5z_lib7Encoder4readEv+0x50>
     1e8:	04 c0       	rjmp	.+8      	; 0x1f2 <_ZN5z_lib7Encoder4readEv+0x24>
     1ea:	91 11       	cpse	r25, r1
     1ec:	09 c0       	rjmp	.+18     	; 0x200 <_ZN5z_lib7Encoder4readEv+0x32>
     1ee:	82 30       	cpi	r24, 0x02	; 2
     1f0:	b1 f4       	brne	.+44     	; 0x21e <_ZN5z_lib7Encoder4readEv+0x50>
			{
				if(count < this->max_val)
     1f2:	9e 81       	ldd	r25, Y+6	; 0x06
     1f4:	2d 81       	ldd	r18, Y+5	; 0x05
     1f6:	92 17       	cp	r25, r18
     1f8:	90 f4       	brcc	.+36     	; 0x21e <_ZN5z_lib7Encoder4readEv+0x50>
				{
					count++;
     1fa:	9f 5f       	subi	r25, 0xFF	; 255
     1fc:	9e 83       	std	Y+6, r25	; 0x06
     1fe:	0f c0       	rjmp	.+30     	; 0x21e <_ZN5z_lib7Encoder4readEv+0x50>
				}
			}
			else if((gray_val==2 && gray_val_tmp==0) || (gray_val==1 && gray_val_tmp==3))
     200:	92 30       	cpi	r25, 0x02	; 2
     202:	19 f4       	brne	.+6      	; 0x20a <_ZN5z_lib7Encoder4readEv+0x3c>
     204:	88 23       	and	r24, r24
     206:	29 f0       	breq	.+10     	; 0x212 <_ZN5z_lib7Encoder4readEv+0x44>
     208:	0a c0       	rjmp	.+20     	; 0x21e <_ZN5z_lib7Encoder4readEv+0x50>
     20a:	91 30       	cpi	r25, 0x01	; 1
     20c:	41 f4       	brne	.+16     	; 0x21e <_ZN5z_lib7Encoder4readEv+0x50>
     20e:	83 30       	cpi	r24, 0x03	; 3
     210:	31 f4       	brne	.+12     	; 0x21e <_ZN5z_lib7Encoder4readEv+0x50>
			{
				if(count > this->min_val)
     212:	9e 81       	ldd	r25, Y+6	; 0x06
     214:	2c 81       	ldd	r18, Y+4	; 0x04
     216:	29 17       	cp	r18, r25
     218:	10 f4       	brcc	.+4      	; 0x21e <_ZN5z_lib7Encoder4readEv+0x50>
				{
					count--;
     21a:	91 50       	subi	r25, 0x01	; 1
     21c:	9e 83       	std	Y+6, r25	; 0x06
				}
			}

			gray_val = gray_val_tmp;
     21e:	8f 83       	std	Y+7, r24	; 0x07
		}		
		
		return count;			
	}
     220:	8e 81       	ldd	r24, Y+6	; 0x06
     222:	df 91       	pop	r29
     224:	cf 91       	pop	r28
     226:	08 95       	ret

00000228 <_ZN5z_lib4GpioC1EPVhhNS0_4ModeE>:
		*this->port &= ~(1 << this->pin);		
	}
	
	void Gpio::toggle(void)
	{
		*this->port ^= (1 << this->pin);		
     228:	cf 93       	push	r28
     22a:	df 93       	push	r29
     22c:	fc 01       	movw	r30, r24
     22e:	71 83       	std	Z+1, r23	; 0x01
     230:	60 83       	st	Z, r22
     232:	42 83       	std	Z+2, r20	; 0x02
     234:	21 30       	cpi	r18, 0x01	; 1
     236:	31 05       	cpc	r19, r1
     238:	91 f0       	breq	.+36     	; 0x25e <_ZN5z_lib4GpioC1EPVhhNS0_4ModeE+0x36>
     23a:	22 30       	cpi	r18, 0x02	; 2
     23c:	31 05       	cpc	r19, r1
     23e:	d9 f0       	breq	.+54     	; 0x276 <_ZN5z_lib4GpioC1EPVhhNS0_4ModeE+0x4e>
     240:	23 2b       	or	r18, r19
     242:	89 f5       	brne	.+98     	; 0x2a6 <_ZN5z_lib4GpioC1EPVhhNS0_4ModeE+0x7e>
     244:	fb 01       	movw	r30, r22
     246:	22 91       	ld	r18, -Z
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	02 c0       	rjmp	.+4      	; 0x252 <_ZN5z_lib4GpioC1EPVhhNS0_4ModeE+0x2a>
     24e:	88 0f       	add	r24, r24
     250:	99 1f       	adc	r25, r25
     252:	4a 95       	dec	r20
     254:	e2 f7       	brpl	.-8      	; 0x24e <_ZN5z_lib4GpioC1EPVhhNS0_4ModeE+0x26>
     256:	80 95       	com	r24
     258:	82 23       	and	r24, r18
     25a:	80 83       	st	Z, r24
     25c:	24 c0       	rjmp	.+72     	; 0x2a6 <_ZN5z_lib4GpioC1EPVhhNS0_4ModeE+0x7e>
     25e:	fb 01       	movw	r30, r22
     260:	22 91       	ld	r18, -Z
     262:	81 e0       	ldi	r24, 0x01	; 1
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	02 c0       	rjmp	.+4      	; 0x26c <_ZN5z_lib4GpioC1EPVhhNS0_4ModeE+0x44>
     268:	88 0f       	add	r24, r24
     26a:	99 1f       	adc	r25, r25
     26c:	4a 95       	dec	r20
     26e:	e2 f7       	brpl	.-8      	; 0x268 <_ZN5z_lib4GpioC1EPVhhNS0_4ModeE+0x40>
     270:	82 2b       	or	r24, r18
     272:	80 83       	st	Z, r24
     274:	18 c0       	rjmp	.+48     	; 0x2a6 <_ZN5z_lib4GpioC1EPVhhNS0_4ModeE+0x7e>
     276:	db 01       	movw	r26, r22
     278:	3e 91       	ld	r19, -X
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	ec 01       	movw	r28, r24
     280:	02 c0       	rjmp	.+4      	; 0x286 <_ZN5z_lib4GpioC1EPVhhNS0_4ModeE+0x5e>
     282:	cc 0f       	add	r28, r28
     284:	dd 1f       	adc	r29, r29
     286:	4a 95       	dec	r20
     288:	e2 f7       	brpl	.-8      	; 0x282 <_ZN5z_lib4GpioC1EPVhhNS0_4ModeE+0x5a>
     28a:	2c 2f       	mov	r18, r28
     28c:	20 95       	com	r18
     28e:	23 23       	and	r18, r19
     290:	2c 93       	st	X, r18
     292:	db 01       	movw	r26, r22
     294:	2c 91       	ld	r18, X
     296:	02 80       	ldd	r0, Z+2	; 0x02
     298:	02 c0       	rjmp	.+4      	; 0x29e <_ZN5z_lib4GpioC1EPVhhNS0_4ModeE+0x76>
     29a:	88 0f       	add	r24, r24
     29c:	99 1f       	adc	r25, r25
     29e:	0a 94       	dec	r0
     2a0:	e2 f7       	brpl	.-8      	; 0x29a <_ZN5z_lib4GpioC1EPVhhNS0_4ModeE+0x72>
     2a2:	82 2b       	or	r24, r18
     2a4:	8c 93       	st	X, r24
     2a6:	df 91       	pop	r29
     2a8:	cf 91       	pop	r28
     2aa:	08 95       	ret

000002ac <_ZN5z_lib4Gpio3setEv>:
     2ac:	dc 01       	movw	r26, r24
     2ae:	ed 91       	ld	r30, X+
     2b0:	fc 91       	ld	r31, X
     2b2:	11 97       	sbiw	r26, 0x01	; 1
     2b4:	40 81       	ld	r20, Z
     2b6:	21 e0       	ldi	r18, 0x01	; 1
     2b8:	30 e0       	ldi	r19, 0x00	; 0
     2ba:	c9 01       	movw	r24, r18
     2bc:	12 96       	adiw	r26, 0x02	; 2
     2be:	0c 90       	ld	r0, X
     2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <_ZN5z_lib4Gpio3setEv+0x1a>
     2c2:	88 0f       	add	r24, r24
     2c4:	99 1f       	adc	r25, r25
     2c6:	0a 94       	dec	r0
     2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <_ZN5z_lib4Gpio3setEv+0x16>
     2ca:	84 2b       	or	r24, r20
     2cc:	80 83       	st	Z, r24
     2ce:	08 95       	ret

000002d0 <_ZN5z_lib4Gpio5clearEv>:
     2d0:	dc 01       	movw	r26, r24
     2d2:	ed 91       	ld	r30, X+
     2d4:	fc 91       	ld	r31, X
     2d6:	11 97       	sbiw	r26, 0x01	; 1
     2d8:	40 81       	ld	r20, Z
     2da:	21 e0       	ldi	r18, 0x01	; 1
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	b9 01       	movw	r22, r18
     2e0:	12 96       	adiw	r26, 0x02	; 2
     2e2:	0c 90       	ld	r0, X
     2e4:	02 c0       	rjmp	.+4      	; 0x2ea <_ZN5z_lib4Gpio5clearEv+0x1a>
     2e6:	66 0f       	add	r22, r22
     2e8:	77 1f       	adc	r23, r23
     2ea:	0a 94       	dec	r0
     2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <_ZN5z_lib4Gpio5clearEv+0x16>
     2ee:	cb 01       	movw	r24, r22
     2f0:	80 95       	com	r24
     2f2:	84 23       	and	r24, r20
     2f4:	80 83       	st	Z, r24
     2f6:	08 95       	ret

000002f8 <_ZN5z_lib4Gpio4readEv>:
	}
	
	uint8_t Gpio::read(void)
	{
     2f8:	dc 01       	movw	r26, r24
		return (PIN(*this->port) & (1U << this->pin));
     2fa:	ed 91       	ld	r30, X+
     2fc:	fc 91       	ld	r31, X
     2fe:	11 97       	sbiw	r26, 0x01	; 1
     300:	32 97       	sbiw	r30, 0x02	; 2
     302:	40 81       	ld	r20, Z
     304:	21 e0       	ldi	r18, 0x01	; 1
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	c9 01       	movw	r24, r18
     30a:	12 96       	adiw	r26, 0x02	; 2
     30c:	0c 90       	ld	r0, X
     30e:	02 c0       	rjmp	.+4      	; 0x314 <_ZN5z_lib4Gpio4readEv+0x1c>
     310:	88 0f       	add	r24, r24
     312:	99 1f       	adc	r25, r25
     314:	0a 94       	dec	r0
     316:	e2 f7       	brpl	.-8      	; 0x310 <_ZN5z_lib4Gpio4readEv+0x18>
	}
     318:	84 23       	and	r24, r20
     31a:	08 95       	ret

0000031c <i2c_init>:
 */ 
#include "i2c_master.h"

void i2c_init(void)
{
	TWBR = (uint8_t)TWBR_val;
     31c:	88 e4       	ldi	r24, 0x48	; 72
     31e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     322:	08 95       	ret

00000324 <i2c_start>:
}

uint8_t i2c_start(uint8_t address)
{
	/* Reset control resister*/
	TWCR = 0;
     324:	ec eb       	ldi	r30, 0xBC	; 188
     326:	f0 e0       	ldi	r31, 0x00	; 0
     328:	10 82       	st	Z, r1
	
	/* Transmit start condition */
	TWCR = TRANS_START | START_COND;
     32a:	94 ea       	ldi	r25, 0xA4	; 164
     32c:	90 83       	st	Z, r25
	
	/* Wait for transmission end */
	while(!TRANS_FINISH);
     32e:	90 81       	ld	r25, Z
     330:	99 23       	and	r25, r25
     332:	ec f7       	brge	.-6      	; 0x32e <i2c_start+0xa>
	
	/* Check if start transmit was successful */
	if((TWSR & 0xF8) != TW_START)
     334:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     338:	98 7f       	andi	r25, 0xF8	; 248
     33a:	98 30       	cpi	r25, 0x08	; 8
     33c:	a1 f4       	brne	.+40     	; 0x366 <i2c_start+0x42>
	{
		return 1;
	}
	
	/* Load slave address to data register */
	DATA_REG = address;
     33e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	
	/* Start address transmission */
	TWCR = TRANS_START;
     342:	84 e8       	ldi	r24, 0x84	; 132
     344:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	/* Wait for transmission end*/	
	while(!TRANS_FINISH);
     348:	ec eb       	ldi	r30, 0xBC	; 188
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	80 81       	ld	r24, Z
     34e:	88 23       	and	r24, r24
     350:	ec f7       	brge	.-6      	; 0x34c <i2c_start+0x28>
	
	/* Check if slave acknowledged read/write mode */
	uint8_t twst = TW_STATUS & 0xF8;
     352:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     356:	98 7f       	andi	r25, 0xF8	; 248
	if((twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK))
     358:	98 31       	cpi	r25, 0x18	; 24
     35a:	39 f0       	breq	.+14     	; 0x36a <i2c_start+0x46>
	while(!TRANS_FINISH);
	
	/* Check if start transmit was successful */
	if((TWSR & 0xF8) != TW_START)
	{
		return 1;
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	90 34       	cpi	r25, 0x40	; 64
     360:	29 f4       	brne	.+10     	; 0x36c <i2c_start+0x48>
     362:	80 e0       	ldi	r24, 0x00	; 0
     364:	08 95       	ret
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	08 95       	ret
	if((twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK))
	{
		return 1;
	}
	
	return 0;
     36a:	80 e0       	ldi	r24, 0x00	; 0
}
     36c:	08 95       	ret

0000036e <i2c_write>:

uint8_t i2c_write(uint8_t data)
{
	/* Load data into register */
	DATA_REG = data;
     36e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	
	/* Start data transmission */
	TWCR = TRANS_START;
     372:	84 e8       	ldi	r24, 0x84	; 132
     374:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	/* Wait for transmission end */
	while(!TRANS_FINISH);
     378:	ec eb       	ldi	r30, 0xBC	; 188
     37a:	f0 e0       	ldi	r31, 0x00	; 0
     37c:	80 81       	ld	r24, Z
     37e:	88 23       	and	r24, r24
     380:	ec f7       	brge	.-6      	; 0x37c <i2c_write+0xe>
	
	/* Check acknowledge */
	if((TWSR & 0xF8) != TW_MT_DATA_ACK)
     382:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     386:	98 7f       	andi	r25, 0xF8	; 248
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	98 32       	cpi	r25, 0x28	; 40
     38c:	09 f4       	brne	.+2      	; 0x390 <i2c_write+0x22>
     38e:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 1;
	}
	
	return 0;
}
     390:	08 95       	ret

00000392 <__vector_14>:
/* using interrupts breaks _delay_ms so this is for testing */
void dirty_del()
{
	volatile int i = 0;
	while (++i < 32500);
}
     392:	1f 92       	push	r1
     394:	0f 92       	push	r0
     396:	0f b6       	in	r0, 0x3f	; 63
     398:	0f 92       	push	r0
     39a:	11 24       	eor	r1, r1
     39c:	cf 92       	push	r12
     39e:	df 92       	push	r13
     3a0:	ef 92       	push	r14
     3a2:	ff 92       	push	r15
     3a4:	2f 93       	push	r18
     3a6:	3f 93       	push	r19
     3a8:	4f 93       	push	r20
     3aa:	5f 93       	push	r21
     3ac:	6f 93       	push	r22
     3ae:	7f 93       	push	r23
     3b0:	8f 93       	push	r24
     3b2:	9f 93       	push	r25
     3b4:	af 93       	push	r26
     3b6:	bf 93       	push	r27
     3b8:	ef 93       	push	r30
     3ba:	ff 93       	push	r31
     3bc:	8e e5       	ldi	r24, 0x5E	; 94
     3be:	91 e0       	ldi	r25, 0x01	; 1
     3c0:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <_ZN5z_lib3Nco11next_signalEv>
     3c4:	c0 90 25 01 	lds	r12, 0x0125	; 0x800125 <ampl>
     3c8:	d0 90 26 01 	lds	r13, 0x0126	; 0x800126 <ampl+0x1>
     3cc:	e0 90 27 01 	lds	r14, 0x0127	; 0x800127 <ampl+0x2>
     3d0:	f0 90 28 01 	lds	r15, 0x0128	; 0x800128 <ampl+0x3>
     3d4:	68 2f       	mov	r22, r24
     3d6:	70 e0       	ldi	r23, 0x00	; 0
     3d8:	80 e0       	ldi	r24, 0x00	; 0
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	0e 94 44 08 	call	0x1088	; 0x1088 <__floatsisf>
     3e0:	a7 01       	movw	r20, r14
     3e2:	96 01       	movw	r18, r12
     3e4:	0e 94 a1 07 	call	0xf42	; 0xf42 <__divsf3>
     3e8:	0e 94 13 08 	call	0x1026	; 0x1026 <__fixunssfsi>
     3ec:	cb 01       	movw	r24, r22
     3ee:	0e 94 63 05 	call	0xac6	; 0xac6 <mcp4725_write>
     3f2:	ff 91       	pop	r31
     3f4:	ef 91       	pop	r30
     3f6:	bf 91       	pop	r27
     3f8:	af 91       	pop	r26
     3fa:	9f 91       	pop	r25
     3fc:	8f 91       	pop	r24
     3fe:	7f 91       	pop	r23
     400:	6f 91       	pop	r22
     402:	5f 91       	pop	r21
     404:	4f 91       	pop	r20
     406:	3f 91       	pop	r19
     408:	2f 91       	pop	r18
     40a:	ff 90       	pop	r15
     40c:	ef 90       	pop	r14
     40e:	df 90       	pop	r13
     410:	cf 90       	pop	r12
     412:	0f 90       	pop	r0
     414:	0f be       	out	0x3f, r0	; 63
     416:	0f 90       	pop	r0
     418:	1f 90       	pop	r1
     41a:	18 95       	reti

0000041c <__vector_11>:
     41c:	1f 92       	push	r1
     41e:	0f 92       	push	r0
     420:	0f b6       	in	r0, 0x3f	; 63
     422:	0f 92       	push	r0
     424:	11 24       	eor	r1, r1
     426:	cf 92       	push	r12
     428:	df 92       	push	r13
     42a:	ef 92       	push	r14
     42c:	ff 92       	push	r15
     42e:	2f 93       	push	r18
     430:	3f 93       	push	r19
     432:	4f 93       	push	r20
     434:	5f 93       	push	r21
     436:	6f 93       	push	r22
     438:	7f 93       	push	r23
     43a:	8f 93       	push	r24
     43c:	9f 93       	push	r25
     43e:	af 93       	push	r26
     440:	bf 93       	push	r27
     442:	ef 93       	push	r30
     444:	ff 93       	push	r31
     446:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     44a:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <del_tick>
     44e:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <del_tick+0x1>
     452:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <del_time>
     456:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <del_time+0x1>
     45a:	28 17       	cp	r18, r24
     45c:	39 07       	cpc	r19, r25
     45e:	09 f0       	breq	.+2      	; 0x462 <__vector_11+0x46>
     460:	6a c0       	rjmp	.+212    	; 0x536 <__stack+0x37>
     462:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <seq_step>
     466:	30 91 49 01 	lds	r19, 0x0149	; 0x800149 <seq_step+0x1>
     46a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <seq_len>
     46e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <seq_len+0x1>
     472:	28 17       	cp	r18, r24
     474:	39 07       	cpc	r19, r25
     476:	21 f4       	brne	.+8      	; 0x480 <__vector_11+0x64>
     478:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <seq_step+0x1>
     47c:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <seq_step>
     480:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <seq_step>
     484:	70 91 49 01 	lds	r23, 0x0149	; 0x800149 <seq_step+0x1>
     488:	6f 5f       	subi	r22, 0xFF	; 255
     48a:	83 e7       	ldi	r24, 0x73	; 115
     48c:	92 e0       	ldi	r25, 0x02	; 2
     48e:	0e 94 c3 06 	call	0xd86	; 0xd86 <_ZN5z_lib12SevenSegment7set_numEh>
     492:	e0 91 48 01 	lds	r30, 0x0148	; 0x800148 <seq_step>
     496:	f0 91 49 01 	lds	r31, 0x0149	; 0x800149 <seq_step+0x1>
     49a:	ee 0f       	add	r30, r30
     49c:	ff 1f       	adc	r31, r31
     49e:	eb 5e       	subi	r30, 0xEB	; 235
     4a0:	fe 4f       	sbci	r31, 0xFE	; 254
     4a2:	60 81       	ld	r22, Z
     4a4:	06 2e       	mov	r0, r22
     4a6:	00 0c       	add	r0, r0
     4a8:	77 0b       	sbc	r23, r23
     4aa:	65 54       	subi	r22, 0x45	; 69
     4ac:	71 09       	sbc	r23, r1
     4ae:	07 2e       	mov	r0, r23
     4b0:	00 0c       	add	r0, r0
     4b2:	88 0b       	sbc	r24, r24
     4b4:	99 0b       	sbc	r25, r25
     4b6:	0e 94 44 08 	call	0x1088	; 0x1088 <__floatsisf>
     4ba:	20 e0       	ldi	r18, 0x00	; 0
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	40 e4       	ldi	r20, 0x40	; 64
     4c0:	51 e4       	ldi	r21, 0x41	; 65
     4c2:	0e 94 a1 07 	call	0xf42	; 0xf42 <__divsf3>
     4c6:	9b 01       	movw	r18, r22
     4c8:	ac 01       	movw	r20, r24
     4ca:	60 e0       	ldi	r22, 0x00	; 0
     4cc:	70 e0       	ldi	r23, 0x00	; 0
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	90 e4       	ldi	r25, 0x40	; 64
     4d2:	0e 94 66 09 	call	0x12cc	; 0x12cc <pow>
     4d6:	29 e2       	ldi	r18, 0x29	; 41
     4d8:	3c e1       	ldi	r19, 0x1C	; 28
     4da:	46 e2       	ldi	r20, 0x26	; 38
     4dc:	54 e4       	ldi	r21, 0x44	; 68
     4de:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__mulsf3>
     4e2:	6b 01       	movw	r12, r22
     4e4:	7c 01       	movw	r14, r24
     4e6:	60 91 29 01 	lds	r22, 0x0129	; 0x800129 <octave>
     4ea:	70 e0       	ldi	r23, 0x00	; 0
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	0e 94 44 08 	call	0x1088	; 0x1088 <__floatsisf>
     4f4:	9b 01       	movw	r18, r22
     4f6:	ac 01       	movw	r20, r24
     4f8:	c7 01       	movw	r24, r14
     4fa:	b6 01       	movw	r22, r12
     4fc:	0e 94 a1 07 	call	0xf42	; 0xf42 <__divsf3>
     500:	ab 01       	movw	r20, r22
     502:	bc 01       	movw	r22, r24
     504:	8e e5       	ldi	r24, 0x5E	; 94
     506:	91 e0       	ldi	r25, 0x01	; 1
     508:	0e 94 cc 05 	call	0xb98	; 0xb98 <_ZN5z_lib3Nco13set_frequencyEf>
     50c:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <seq_step>
     510:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <seq_step+0x1>
     514:	01 96       	adiw	r24, 0x01	; 1
     516:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <seq_step+0x1>
     51a:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <seq_step>
     51e:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <del_tick+0x1>
     522:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <del_tick>
     526:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <del_time_new>
     52a:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <del_time_new+0x1>
     52e:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <del_time+0x1>
     532:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <del_time>
     536:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <del_tick>
     53a:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <del_tick+0x1>
     53e:	01 96       	adiw	r24, 0x01	; 1
     540:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <del_tick+0x1>
     544:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <del_tick>
     548:	ff 91       	pop	r31
     54a:	ef 91       	pop	r30
     54c:	bf 91       	pop	r27
     54e:	af 91       	pop	r26
     550:	9f 91       	pop	r25
     552:	8f 91       	pop	r24
     554:	7f 91       	pop	r23
     556:	6f 91       	pop	r22
     558:	5f 91       	pop	r21
     55a:	4f 91       	pop	r20
     55c:	3f 91       	pop	r19
     55e:	2f 91       	pop	r18
     560:	ff 90       	pop	r15
     562:	ef 90       	pop	r14
     564:	df 90       	pop	r13
     566:	cf 90       	pop	r12
     568:	0f 90       	pop	r0
     56a:	0f be       	out	0x3f, r0	; 63
     56c:	0f 90       	pop	r0
     56e:	1f 90       	pop	r1
     570:	18 95       	reti

00000572 <__vector_7>:
     572:	1f 92       	push	r1
     574:	0f 92       	push	r0
     576:	0f b6       	in	r0, 0x3f	; 63
     578:	0f 92       	push	r0
     57a:	11 24       	eor	r1, r1
     57c:	cf 92       	push	r12
     57e:	df 92       	push	r13
     580:	ef 92       	push	r14
     582:	ff 92       	push	r15
     584:	0f 93       	push	r16
     586:	1f 93       	push	r17
     588:	2f 93       	push	r18
     58a:	3f 93       	push	r19
     58c:	4f 93       	push	r20
     58e:	5f 93       	push	r21
     590:	6f 93       	push	r22
     592:	7f 93       	push	r23
     594:	8f 93       	push	r24
     596:	9f 93       	push	r25
     598:	af 93       	push	r26
     59a:	bf 93       	push	r27
     59c:	ef 93       	push	r30
     59e:	ff 93       	push	r31
     5a0:	8a e6       	ldi	r24, 0x6A	; 106
     5a2:	92 e0       	ldi	r25, 0x02	; 2
     5a4:	0e 94 e7 00 	call	0x1ce	; 0x1ce <_ZN5z_lib7Encoder4readEv>
     5a8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     5ac:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__data_end>
     5b0:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <__data_end+0x1>
     5b4:	89 2b       	or	r24, r25
     5b6:	81 f4       	brne	.+32     	; 0x5d8 <__vector_7+0x66>
     5b8:	87 eb       	ldi	r24, 0xB7	; 183
     5ba:	92 e0       	ldi	r25, 0x02	; 2
     5bc:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_ZN5z_lib4Gpio4readEv>
     5c0:	88 23       	and	r24, r24
     5c2:	51 f0       	breq	.+20     	; 0x5d8 <__vector_7+0x66>
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <__data_end+0x1>
     5cc:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <__data_end>
     5d0:	15 bc       	out	0x25, r1	; 37
     5d2:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     5d6:	18 c0       	rjmp	.+48     	; 0x608 <__vector_7+0x96>
     5d8:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__data_end>
     5dc:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <__data_end+0x1>
     5e0:	01 97       	sbiw	r24, 0x01	; 1
     5e2:	91 f4       	brne	.+36     	; 0x608 <__vector_7+0x96>
     5e4:	87 eb       	ldi	r24, 0xB7	; 183
     5e6:	92 e0       	ldi	r25, 0x02	; 2
     5e8:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_ZN5z_lib4Gpio4readEv>
     5ec:	88 23       	and	r24, r24
     5ee:	61 f0       	breq	.+24     	; 0x608 <__vector_7+0x96>
     5f0:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__data_end+0x1>
     5f4:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__data_end>
     5f8:	85 b5       	in	r24, 0x25	; 37
     5fa:	83 60       	ori	r24, 0x03	; 3
     5fc:	85 bd       	out	0x25, r24	; 37
     5fe:	e1 e8       	ldi	r30, 0x81	; 129
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	80 81       	ld	r24, Z
     604:	83 60       	ori	r24, 0x03	; 3
     606:	80 83       	st	Z, r24
     608:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     60c:	86 2f       	mov	r24, r22
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	a0 e0       	ldi	r26, 0x00	; 0
     612:	b0 e0       	ldi	r27, 0x00	; 0
     614:	8c 01       	movw	r16, r24
     616:	9d 01       	movw	r18, r26
     618:	00 0f       	add	r16, r16
     61a:	11 1f       	adc	r17, r17
     61c:	22 1f       	adc	r18, r18
     61e:	33 1f       	adc	r19, r19
     620:	00 0f       	add	r16, r16
     622:	11 1f       	adc	r17, r17
     624:	22 1f       	adc	r18, r18
     626:	33 1f       	adc	r19, r19
     628:	00 0f       	add	r16, r16
     62a:	11 1f       	adc	r17, r17
     62c:	22 1f       	adc	r18, r18
     62e:	33 1f       	adc	r19, r19
     630:	bc 01       	movw	r22, r24
     632:	cd 01       	movw	r24, r26
     634:	60 1b       	sub	r22, r16
     636:	71 0b       	sbc	r23, r17
     638:	82 0b       	sbc	r24, r18
     63a:	93 0b       	sbc	r25, r19
     63c:	0f 2e       	mov	r0, r31
     63e:	f7 e0       	ldi	r31, 0x07	; 7
     640:	cf 2e       	mov	r12, r31
     642:	d1 2c       	mov	r13, r1
     644:	e1 2c       	mov	r14, r1
     646:	f1 2c       	mov	r15, r1
     648:	f0 2d       	mov	r31, r0
     64a:	a7 01       	movw	r20, r14
     64c:	96 01       	movw	r18, r12
     64e:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__divmodsi4>
     652:	da 01       	movw	r26, r20
     654:	c9 01       	movw	r24, r18
     656:	07 96       	adiw	r24, 0x07	; 7
     658:	a1 1d       	adc	r26, r1
     65a:	b1 1d       	adc	r27, r1
     65c:	9c 01       	movw	r18, r24
     65e:	22 0f       	add	r18, r18
     660:	33 1f       	adc	r19, r19
     662:	f9 01       	movw	r30, r18
     664:	e9 5f       	subi	r30, 0xF9	; 249
     666:	fe 4f       	sbci	r31, 0xFE	; 254
     668:	80 81       	ld	r24, Z
     66a:	91 81       	ldd	r25, Z+1	; 0x01
     66c:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <new_freq+0x1>
     670:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <new_freq>
     674:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     678:	86 2f       	mov	r24, r22
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	a0 e0       	ldi	r26, 0x00	; 0
     67e:	b0 e0       	ldi	r27, 0x00	; 0
     680:	8c 01       	movw	r16, r24
     682:	9d 01       	movw	r18, r26
     684:	00 0f       	add	r16, r16
     686:	11 1f       	adc	r17, r17
     688:	22 1f       	adc	r18, r18
     68a:	33 1f       	adc	r19, r19
     68c:	00 0f       	add	r16, r16
     68e:	11 1f       	adc	r17, r17
     690:	22 1f       	adc	r18, r18
     692:	33 1f       	adc	r19, r19
     694:	00 0f       	add	r16, r16
     696:	11 1f       	adc	r17, r17
     698:	22 1f       	adc	r18, r18
     69a:	33 1f       	adc	r19, r19
     69c:	bc 01       	movw	r22, r24
     69e:	cd 01       	movw	r24, r26
     6a0:	60 1b       	sub	r22, r16
     6a2:	71 0b       	sbc	r23, r17
     6a4:	82 0b       	sbc	r24, r18
     6a6:	93 0b       	sbc	r25, r19
     6a8:	a7 01       	movw	r20, r14
     6aa:	96 01       	movw	r18, r12
     6ac:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__divmodsi4>
     6b0:	ca 01       	movw	r24, r20
     6b2:	b9 01       	movw	r22, r18
     6b4:	69 5f       	subi	r22, 0xF9	; 249
     6b6:	7f 4f       	sbci	r23, 0xFF	; 255
     6b8:	8f 4f       	sbci	r24, 0xFF	; 255
     6ba:	9f 4f       	sbci	r25, 0xFF	; 255
     6bc:	89 e7       	ldi	r24, 0x79	; 121
     6be:	92 e0       	ldi	r25, 0x02	; 2
     6c0:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5z_lib8ShiftReg9set_valueEh>
     6c4:	ff 91       	pop	r31
     6c6:	ef 91       	pop	r30
     6c8:	bf 91       	pop	r27
     6ca:	af 91       	pop	r26
     6cc:	9f 91       	pop	r25
     6ce:	8f 91       	pop	r24
     6d0:	7f 91       	pop	r23
     6d2:	6f 91       	pop	r22
     6d4:	5f 91       	pop	r21
     6d6:	4f 91       	pop	r20
     6d8:	3f 91       	pop	r19
     6da:	2f 91       	pop	r18
     6dc:	1f 91       	pop	r17
     6de:	0f 91       	pop	r16
     6e0:	ff 90       	pop	r15
     6e2:	ef 90       	pop	r14
     6e4:	df 90       	pop	r13
     6e6:	cf 90       	pop	r12
     6e8:	0f 90       	pop	r0
     6ea:	0f be       	out	0x3f, r0	; 63
     6ec:	0f 90       	pop	r0
     6ee:	1f 90       	pop	r1
     6f0:	18 95       	reti

000006f2 <_Z12setup_timer0v>:
     6f2:	14 bc       	out	0x24, r1	; 36
     6f4:	84 b5       	in	r24, 0x24	; 36
     6f6:	82 60       	ori	r24, 0x02	; 2
     6f8:	84 bd       	out	0x24, r24	; 36
     6fa:	85 b5       	in	r24, 0x25	; 37
     6fc:	83 60       	ori	r24, 0x03	; 3
     6fe:	85 bd       	out	0x25, r24	; 37
     700:	87 b5       	in	r24, 0x27	; 39
     702:	82 63       	ori	r24, 0x32	; 50
     704:	87 bd       	out	0x27, r24	; 39
     706:	ee e6       	ldi	r30, 0x6E	; 110
     708:	f0 e0       	ldi	r31, 0x00	; 0
     70a:	80 81       	ld	r24, Z
     70c:	82 60       	ori	r24, 0x02	; 2
     70e:	80 83       	st	Z, r24
     710:	08 95       	ret

00000712 <_Z12setup_timer1v>:
     712:	8a ef       	ldi	r24, 0xFA	; 250
     714:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     718:	88 e0       	ldi	r24, 0x08	; 8
     71a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     71e:	83 e0       	ldi	r24, 0x03	; 3
     720:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     724:	82 e0       	ldi	r24, 0x02	; 2
     726:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     72a:	08 95       	ret

0000072c <_Z12setup_timer2v>:
     72c:	86 e9       	ldi	r24, 0x96	; 150
     72e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     732:	e0 eb       	ldi	r30, 0xB0	; 176
     734:	f0 e0       	ldi	r31, 0x00	; 0
     736:	80 81       	ld	r24, Z
     738:	88 60       	ori	r24, 0x08	; 8
     73a:	80 83       	st	Z, r24
     73c:	e1 eb       	ldi	r30, 0xB1	; 177
     73e:	f0 e0       	ldi	r31, 0x00	; 0
     740:	80 81       	ld	r24, Z
     742:	86 60       	ori	r24, 0x06	; 6
     744:	80 83       	st	Z, r24
     746:	82 e0       	ldi	r24, 0x02	; 2
     748:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     74c:	08 95       	ret

0000074e <_Z9setup_adcv>:

void setup_adc(void)
{
	ADMUX |= 7 | (1 << REFS0) | (1 << ADLAR);
     74e:	ec e7       	ldi	r30, 0x7C	; 124
     750:	f0 e0       	ldi	r31, 0x00	; 0
     752:	80 81       	ld	r24, Z
     754:	87 66       	ori	r24, 0x67	; 103
     756:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN) | ADC_PSC_128;
     758:	ea e7       	ldi	r30, 0x7A	; 122
     75a:	f0 e0       	ldi	r31, 0x00	; 0
     75c:	80 81       	ld	r24, Z
     75e:	87 68       	ori	r24, 0x87	; 135
     760:	80 83       	st	Z, r24
     762:	08 95       	ret

00000764 <_Z8adc_readh>:
}

uint8_t adc_read (uint8_t chan)
{
	ADMUX |= (1 << REFS0) | (1 << ADLAR) | (chan & 0x0F);
     764:	ec e7       	ldi	r30, 0x7C	; 124
     766:	f0 e0       	ldi	r31, 0x00	; 0
     768:	90 81       	ld	r25, Z
     76a:	8f 70       	andi	r24, 0x0F	; 15
     76c:	90 66       	ori	r25, 0x60	; 96
     76e:	89 2b       	or	r24, r25
     770:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC) ;
     772:	ea e7       	ldi	r30, 0x7A	; 122
     774:	f0 e0       	ldi	r31, 0x00	; 0
     776:	80 81       	ld	r24, Z
     778:	80 64       	ori	r24, 0x40	; 64
     77a:	80 83       	st	Z, r24
	
	while (ADCSRA & (1 << ADSC)); // Wait for read completion
     77c:	80 81       	ld	r24, Z
     77e:	86 fd       	sbrc	r24, 6
     780:	fd cf       	rjmp	.-6      	; 0x77c <_Z8adc_readh+0x18>
	
	return ADCH;	
     782:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
     786:	08 95       	ret

00000788 <_Z12btn_mux_readh>:

uint8_t btn_mux_read(uint8_t chan)
{
     788:	ef 92       	push	r14
     78a:	ff 92       	push	r15
     78c:	0f 93       	push	r16
     78e:	1f 93       	push	r17
     790:	cf 93       	push	r28
     792:	df 93       	push	r29
     794:	08 ea       	ldi	r16, 0xA8	; 168
     796:	12 e0       	ldi	r17, 0x02	; 2
     798:	c0 e0       	ldi	r28, 0x00	; 0
     79a:	d0 e0       	ldi	r29, 0x00	; 0
	/* Set multiplexer channel */
	for(uint8_t pin = 0; pin < NUM_BUTTONS; ++pin)
	{
		if(chan & (1 << pin))
     79c:	e8 2e       	mov	r14, r24
     79e:	f1 2c       	mov	r15, r1
     7a0:	97 01       	movw	r18, r14
     7a2:	0c 2e       	mov	r0, r28
     7a4:	02 c0       	rjmp	.+4      	; 0x7aa <_Z12btn_mux_readh+0x22>
     7a6:	35 95       	asr	r19
     7a8:	27 95       	ror	r18
     7aa:	0a 94       	dec	r0
     7ac:	e2 f7       	brpl	.-8      	; 0x7a6 <_Z12btn_mux_readh+0x1e>
     7ae:	20 ff       	sbrs	r18, 0
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <_Z12btn_mux_readh+0x32>
		{
			btn_mux_sel[pin].set();
     7b2:	c8 01       	movw	r24, r16
     7b4:	0e 94 56 01 	call	0x2ac	; 0x2ac <_ZN5z_lib4Gpio3setEv>
     7b8:	03 c0       	rjmp	.+6      	; 0x7c0 <_Z12btn_mux_readh+0x38>
		}
		else
		{
			btn_mux_sel[pin].clear();
     7ba:	c8 01       	movw	r24, r16
     7bc:	0e 94 68 01 	call	0x2d0	; 0x2d0 <_ZN5z_lib4Gpio5clearEv>
     7c0:	21 96       	adiw	r28, 0x01	; 1
     7c2:	0d 5f       	subi	r16, 0xFD	; 253
     7c4:	1f 4f       	sbci	r17, 0xFF	; 255
}

uint8_t btn_mux_read(uint8_t chan)
{
	/* Set multiplexer channel */
	for(uint8_t pin = 0; pin < NUM_BUTTONS; ++pin)
     7c6:	c8 30       	cpi	r28, 0x08	; 8
     7c8:	d1 05       	cpc	r29, r1
     7ca:	51 f7       	brne	.-44     	; 0x7a0 <_Z12btn_mux_readh+0x18>
		{
			btn_mux_sel[pin].clear();
		}
	}
	
	return btn_mux_in.read();
     7cc:	85 ea       	ldi	r24, 0xA5	; 165
     7ce:	92 e0       	ldi	r25, 0x02	; 2
     7d0:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_ZN5z_lib4Gpio4readEv>
}
     7d4:	df 91       	pop	r29
     7d6:	cf 91       	pop	r28
     7d8:	1f 91       	pop	r17
     7da:	0f 91       	pop	r16
     7dc:	ff 90       	pop	r15
     7de:	ef 90       	pop	r14
     7e0:	08 95       	ret

000007e2 <_Z12pot_mux_readh>:


uint8_t pot_mux_read(uint8_t chan)
{
     7e2:	ef 92       	push	r14
     7e4:	ff 92       	push	r15
     7e6:	0f 93       	push	r16
     7e8:	1f 93       	push	r17
     7ea:	cf 93       	push	r28
     7ec:	df 93       	push	r29
     7ee:	01 eb       	ldi	r16, 0xB1	; 177
     7f0:	12 e0       	ldi	r17, 0x02	; 2
     7f2:	c0 e0       	ldi	r28, 0x00	; 0
     7f4:	d0 e0       	ldi	r29, 0x00	; 0
	/* Set multiplexer channel */
	for(uint8_t pin = 0; pin < NUM_POTS; ++pin)
	{
		if(chan & (1 << pin))
     7f6:	e8 2e       	mov	r14, r24
     7f8:	f1 2c       	mov	r15, r1
     7fa:	97 01       	movw	r18, r14
     7fc:	0c 2e       	mov	r0, r28
     7fe:	02 c0       	rjmp	.+4      	; 0x804 <_Z12pot_mux_readh+0x22>
     800:	35 95       	asr	r19
     802:	27 95       	ror	r18
     804:	0a 94       	dec	r0
     806:	e2 f7       	brpl	.-8      	; 0x800 <_Z12pot_mux_readh+0x1e>
     808:	20 ff       	sbrs	r18, 0
     80a:	04 c0       	rjmp	.+8      	; 0x814 <_Z12pot_mux_readh+0x32>
		{
			pot_mux_sel[pin].set();
     80c:	c8 01       	movw	r24, r16
     80e:	0e 94 56 01 	call	0x2ac	; 0x2ac <_ZN5z_lib4Gpio3setEv>
     812:	03 c0       	rjmp	.+6      	; 0x81a <_Z12pot_mux_readh+0x38>
		}
		else
		{
			pot_mux_sel[pin].clear();
     814:	c8 01       	movw	r24, r16
     816:	0e 94 68 01 	call	0x2d0	; 0x2d0 <_ZN5z_lib4Gpio5clearEv>
     81a:	21 96       	adiw	r28, 0x01	; 1
     81c:	0d 5f       	subi	r16, 0xFD	; 253
     81e:	1f 4f       	sbci	r17, 0xFF	; 255


uint8_t pot_mux_read(uint8_t chan)
{
	/* Set multiplexer channel */
	for(uint8_t pin = 0; pin < NUM_POTS; ++pin)
     820:	c4 30       	cpi	r28, 0x04	; 4
     822:	d1 05       	cpc	r29, r1
     824:	51 f7       	brne	.-44     	; 0x7fa <_Z12pot_mux_readh+0x18>
		{
			pot_mux_sel[pin].clear();
		}
	}
	
	return adc_read(7);	
     826:	87 e0       	ldi	r24, 0x07	; 7
     828:	0e 94 b2 03 	call	0x764	; 0x764 <_Z8adc_readh>
}
     82c:	df 91       	pop	r29
     82e:	cf 91       	pop	r28
     830:	1f 91       	pop	r17
     832:	0f 91       	pop	r16
     834:	ff 90       	pop	r15
     836:	ef 90       	pop	r14
     838:	08 95       	ret

0000083a <main>:

PlayState play_state = PlayState::PLAYING;

int main(void)
{
	setup_adc();
     83a:	0e 94 a7 03 	call	0x74e	; 0x74e <_Z9setup_adcv>
	
	setup_timer0();             // Oscillator clock timer
     83e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <_Z12setup_timer0v>
	setup_timer1();             // Sequencer tempo timer
     842:	0e 94 89 03 	call	0x712	; 0x712 <_Z12setup_timer1v>
	setup_timer2();             // Controls timer
     846:	0e 94 96 03 	call	0x72c	; 0x72c <_Z12setup_timer2v>

	sei();                      // Enable interrupts
     84a:	78 94       	sei
	
	mcp4725_init(MCP4725_ADDR); // Init DAC
     84c:	80 e6       	ldi	r24, 0x60	; 96
     84e:	0e 94 59 05 	call	0xab2	; 0xab2 <mcp4725_init>
		for(uint8_t pot = 0; pot < NUM_POTS; ++pot)
		{
			pot_vals[pot] = pot_mux_read(pot);
		}
		
		del_time_new = map(pot_vals[0], 0, 255, 100, 1000);
     852:	0f 2e       	mov	r0, r31
     854:	fe e4       	ldi	r31, 0x4E	; 78
     856:	ef 2e       	mov	r14, r31
     858:	f1 e0       	ldi	r31, 0x01	; 1
     85a:	ff 2e       	mov	r15, r31
     85c:	f0 2d       	mov	r31, r0
     85e:	81 2c       	mov	r8, r1
     860:	91 2c       	mov	r9, r1
     862:	54 01       	movw	r10, r8
     864:	8a 94       	dec	r8
     866:	0e e4       	ldi	r16, 0x4E	; 78
     868:	11 e0       	ldi	r17, 0x01	; 1
	mcp4725_init(MCP4725_ADDR); // Init DAC
	
    while (1) 
    {			
		/* Poll potentiometers */
		for(uint8_t pot = 0; pot < NUM_POTS; ++pot)
     86a:	c0 e0       	ldi	r28, 0x00	; 0
		{
			pot_vals[pot] = pot_mux_read(pot);
     86c:	8c 2f       	mov	r24, r28
     86e:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <_Z12pot_mux_readh>
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	f8 01       	movw	r30, r16
     876:	81 93       	st	Z+, r24
     878:	91 93       	st	Z+, r25
     87a:	8f 01       	movw	r16, r30
	mcp4725_init(MCP4725_ADDR); // Init DAC
	
    while (1) 
    {			
		/* Poll potentiometers */
		for(uint8_t pot = 0; pot < NUM_POTS; ++pot)
     87c:	cf 5f       	subi	r28, 0xFF	; 255
     87e:	c4 30       	cpi	r28, 0x04	; 4
     880:	a9 f7       	brne	.-22     	; 0x86c <main+0x32>
		{
			pot_vals[pot] = pot_mux_read(pot);
		}
		
		del_time_new = map(pot_vals[0], 0, 255, 100, 1000);
     882:	f7 01       	movw	r30, r14
     884:	a0 81       	ld	r26, Z
     886:	b1 81       	ldd	r27, Z+1	; 0x01
     888:	24 e8       	ldi	r18, 0x84	; 132
     88a:	33 e0       	ldi	r19, 0x03	; 3
     88c:	0e 94 87 0b 	call	0x170e	; 0x170e <__usmulhisi3>
     890:	a5 01       	movw	r20, r10
     892:	94 01       	movw	r18, r8
     894:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__divmodsi4>
     898:	da 01       	movw	r26, r20
     89a:	c9 01       	movw	r24, r18
     89c:	8c 59       	subi	r24, 0x9C	; 156
     89e:	9f 4f       	sbci	r25, 0xFF	; 255
     8a0:	af 4f       	sbci	r26, 0xFF	; 255
     8a2:	bf 4f       	sbci	r27, 0xFF	; 255
     8a4:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <del_time_new+0x1>
     8a8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <del_time_new>
		ampl = map(pot_vals[1], 0, 255, 1, 10);
     8ac:	f7 01       	movw	r30, r14
     8ae:	82 81       	ldd	r24, Z+2	; 0x02
     8b0:	93 81       	ldd	r25, Z+3	; 0x03
     8b2:	09 2e       	mov	r0, r25
     8b4:	00 0c       	add	r0, r0
     8b6:	aa 0b       	sbc	r26, r26
     8b8:	bb 0b       	sbc	r27, r27
     8ba:	ac 01       	movw	r20, r24
     8bc:	bd 01       	movw	r22, r26
     8be:	44 0f       	add	r20, r20
     8c0:	55 1f       	adc	r21, r21
     8c2:	66 1f       	adc	r22, r22
     8c4:	77 1f       	adc	r23, r23
     8c6:	44 0f       	add	r20, r20
     8c8:	55 1f       	adc	r21, r21
     8ca:	66 1f       	adc	r22, r22
     8cc:	77 1f       	adc	r23, r23
     8ce:	44 0f       	add	r20, r20
     8d0:	55 1f       	adc	r21, r21
     8d2:	66 1f       	adc	r22, r22
     8d4:	77 1f       	adc	r23, r23
     8d6:	8a 01       	movw	r16, r20
     8d8:	9b 01       	movw	r18, r22
     8da:	08 0f       	add	r16, r24
     8dc:	19 1f       	adc	r17, r25
     8de:	2a 1f       	adc	r18, r26
     8e0:	3b 1f       	adc	r19, r27
     8e2:	c9 01       	movw	r24, r18
     8e4:	b8 01       	movw	r22, r16
     8e6:	a5 01       	movw	r20, r10
     8e8:	94 01       	movw	r18, r8
     8ea:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__divmodsi4>
     8ee:	ca 01       	movw	r24, r20
     8f0:	b9 01       	movw	r22, r18
     8f2:	6f 5f       	subi	r22, 0xFF	; 255
     8f4:	7f 4f       	sbci	r23, 0xFF	; 255
     8f6:	8f 4f       	sbci	r24, 0xFF	; 255
     8f8:	9f 4f       	sbci	r25, 0xFF	; 255
     8fa:	0e 94 44 08 	call	0x1088	; 0x1088 <__floatsisf>
     8fe:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <ampl>
     902:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <ampl+0x1>
     906:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <ampl+0x2>
     90a:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <ampl+0x3>
		
		/* Poll buttons if sequencer stopped */
		if(play_state == PlayState::STOPPED)
     90e:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__data_end>
     912:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <__data_end+0x1>
     916:	01 97       	sbiw	r24, 0x01	; 1
     918:	09 f0       	breq	.+2      	; 0x91c <main+0xe2>
     91a:	a5 cf       	rjmp	.-182    	; 0x866 <main+0x2c>
     91c:	05 e1       	ldi	r16, 0x15	; 21
     91e:	11 e0       	ldi	r17, 0x01	; 1
     920:	c0 e0       	ldi	r28, 0x00	; 0
		{	
			for(uint8_t btn = 0; btn < NUM_BUTTONS; ++btn)
			{
				if(btn_mux_read(btn) != 0)
     922:	8c 2f       	mov	r24, r28
     924:	0e 94 c4 03 	call	0x788	; 0x788 <_Z12btn_mux_readh>
     928:	88 23       	and	r24, r24
     92a:	39 f0       	breq	.+14     	; 0x93a <main+0x100>
				{
					midi_seq[btn] = new_freq;
     92c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <new_freq>
     930:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <new_freq+0x1>
     934:	f8 01       	movw	r30, r16
     936:	91 83       	std	Z+1, r25	; 0x01
     938:	80 83       	st	Z, r24
		ampl = map(pot_vals[1], 0, 255, 1, 10);
		
		/* Poll buttons if sequencer stopped */
		if(play_state == PlayState::STOPPED)
		{	
			for(uint8_t btn = 0; btn < NUM_BUTTONS; ++btn)
     93a:	cf 5f       	subi	r28, 0xFF	; 255
     93c:	0e 5f       	subi	r16, 0xFE	; 254
     93e:	1f 4f       	sbci	r17, 0xFF	; 255
     940:	c8 30       	cpi	r28, 0x08	; 8
     942:	79 f7       	brne	.-34     	; 0x922 <main+0xe8>
     944:	90 cf       	rjmp	.-224    	; 0x866 <main+0x2c>

00000946 <_GLOBAL__sub_I__Z3maplllll>:
			pot_mux_sel[pin].clear();
		}
	}
	
	return adc_read(7);	
}
     946:	0f 93       	push	r16
using z_lib::Nco;
using z_lib::Wave;
using z_lib::Adsr;

/* Gpio pin setup */
Gpio enc_pins[2]     = {Gpio(&PORTD, PIND3, Gpio::Mode::IN), Gpio(&PORTD, PIND4, Gpio::Mode::IN)};
     948:	20 e0       	ldi	r18, 0x00	; 0
     94a:	30 e0       	ldi	r19, 0x00	; 0
     94c:	43 e0       	ldi	r20, 0x03	; 3
     94e:	6b e2       	ldi	r22, 0x2B	; 43
     950:	70 e0       	ldi	r23, 0x00	; 0
     952:	8a eb       	ldi	r24, 0xBA	; 186
     954:	92 e0       	ldi	r25, 0x02	; 2
     956:	0e 94 14 01 	call	0x228	; 0x228 <_ZN5z_lib4GpioC1EPVhhNS0_4ModeE>
     95a:	20 e0       	ldi	r18, 0x00	; 0
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	44 e0       	ldi	r20, 0x04	; 4
     960:	6b e2       	ldi	r22, 0x2B	; 43
     962:	70 e0       	ldi	r23, 0x00	; 0
     964:	8d eb       	ldi	r24, 0xBD	; 189
     966:	92 e0       	ldi	r25, 0x02	; 2
     968:	0e 94 14 01 	call	0x228	; 0x228 <_ZN5z_lib4GpioC1EPVhhNS0_4ModeE>
Gpio enc_btn         = Gpio(&PORTB, PINB0, Gpio::Mode::IN);
     96c:	20 e0       	ldi	r18, 0x00	; 0
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	40 e0       	ldi	r20, 0x00	; 0
     972:	65 e2       	ldi	r22, 0x25	; 37
     974:	70 e0       	ldi	r23, 0x00	; 0
     976:	87 eb       	ldi	r24, 0xB7	; 183
     978:	92 e0       	ldi	r25, 0x02	; 2
     97a:	0e 94 14 01 	call	0x228	; 0x228 <_ZN5z_lib4GpioC1EPVhhNS0_4ModeE>

Gpio pot_mux_sel[2]  = {Gpio(&PORTC, PINC1, Gpio::Mode::OUT), Gpio(&PORTC, PINC0, Gpio::Mode::OUT)};
     97e:	21 e0       	ldi	r18, 0x01	; 1
     980:	30 e0       	ldi	r19, 0x00	; 0
     982:	41 e0       	ldi	r20, 0x01	; 1
     984:	68 e2       	ldi	r22, 0x28	; 40
     986:	70 e0       	ldi	r23, 0x00	; 0
     988:	81 eb       	ldi	r24, 0xB1	; 177
     98a:	92 e0       	ldi	r25, 0x02	; 2
     98c:	0e 94 14 01 	call	0x228	; 0x228 <_ZN5z_lib4GpioC1EPVhhNS0_4ModeE>
     990:	21 e0       	ldi	r18, 0x01	; 1
     992:	30 e0       	ldi	r19, 0x00	; 0
     994:	40 e0       	ldi	r20, 0x00	; 0
     996:	68 e2       	ldi	r22, 0x28	; 40
     998:	70 e0       	ldi	r23, 0x00	; 0
     99a:	84 eb       	ldi	r24, 0xB4	; 180
     99c:	92 e0       	ldi	r25, 0x02	; 2
     99e:	0e 94 14 01 	call	0x228	; 0x228 <_ZN5z_lib4GpioC1EPVhhNS0_4ModeE>
	
Gpio btn_mux_sel[3]  = {Gpio(&PORTB, PINB2, Gpio::Mode::OUT), 
	                    Gpio(&PORTB, PINB3, Gpio::Mode::OUT),
			      	    Gpio(&PORTB, PINB4, Gpio::Mode::OUT)};
     9a2:	21 e0       	ldi	r18, 0x01	; 1
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	42 e0       	ldi	r20, 0x02	; 2
     9a8:	65 e2       	ldi	r22, 0x25	; 37
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	88 ea       	ldi	r24, 0xA8	; 168
     9ae:	92 e0       	ldi	r25, 0x02	; 2
     9b0:	0e 94 14 01 	call	0x228	; 0x228 <_ZN5z_lib4GpioC1EPVhhNS0_4ModeE>
     9b4:	21 e0       	ldi	r18, 0x01	; 1
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	43 e0       	ldi	r20, 0x03	; 3
     9ba:	65 e2       	ldi	r22, 0x25	; 37
     9bc:	70 e0       	ldi	r23, 0x00	; 0
     9be:	8b ea       	ldi	r24, 0xAB	; 171
     9c0:	92 e0       	ldi	r25, 0x02	; 2
     9c2:	0e 94 14 01 	call	0x228	; 0x228 <_ZN5z_lib4GpioC1EPVhhNS0_4ModeE>
     9c6:	21 e0       	ldi	r18, 0x01	; 1
     9c8:	30 e0       	ldi	r19, 0x00	; 0
     9ca:	44 e0       	ldi	r20, 0x04	; 4
     9cc:	65 e2       	ldi	r22, 0x25	; 37
     9ce:	70 e0       	ldi	r23, 0x00	; 0
     9d0:	8e ea       	ldi	r24, 0xAE	; 174
     9d2:	92 e0       	ldi	r25, 0x02	; 2
     9d4:	0e 94 14 01 	call	0x228	; 0x228 <_ZN5z_lib4GpioC1EPVhhNS0_4ModeE>

Gpio btn_mux_in      = Gpio(&PORTB, PINB1, Gpio::Mode::IN);
     9d8:	20 e0       	ldi	r18, 0x00	; 0
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	41 e0       	ldi	r20, 0x01	; 1
     9de:	65 e2       	ldi	r22, 0x25	; 37
     9e0:	70 e0       	ldi	r23, 0x00	; 0
     9e2:	85 ea       	ldi	r24, 0xA5	; 165
     9e4:	92 e0       	ldi	r25, 0x02	; 2
     9e6:	0e 94 14 01 	call	0x228	; 0x228 <_ZN5z_lib4GpioC1EPVhhNS0_4ModeE>

Gpio sev_seg_gpio[3] = {Gpio(&PORTC, PINC3, Gpio::Mode::OUT),
	                    Gpio(&PORTC, PINC2, Gpio::Mode::OUT),
				        Gpio(&PORTB, PINB5, Gpio::Mode::OUT)};
     9ea:	21 e0       	ldi	r18, 0x01	; 1
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	43 e0       	ldi	r20, 0x03	; 3
     9f0:	68 e2       	ldi	r22, 0x28	; 40
     9f2:	70 e0       	ldi	r23, 0x00	; 0
     9f4:	8c e9       	ldi	r24, 0x9C	; 156
     9f6:	92 e0       	ldi	r25, 0x02	; 2
     9f8:	0e 94 14 01 	call	0x228	; 0x228 <_ZN5z_lib4GpioC1EPVhhNS0_4ModeE>
     9fc:	21 e0       	ldi	r18, 0x01	; 1
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	42 e0       	ldi	r20, 0x02	; 2
     a02:	68 e2       	ldi	r22, 0x28	; 40
     a04:	70 e0       	ldi	r23, 0x00	; 0
     a06:	8f e9       	ldi	r24, 0x9F	; 159
     a08:	92 e0       	ldi	r25, 0x02	; 2
     a0a:	0e 94 14 01 	call	0x228	; 0x228 <_ZN5z_lib4GpioC1EPVhhNS0_4ModeE>
     a0e:	21 e0       	ldi	r18, 0x01	; 1
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	45 e0       	ldi	r20, 0x05	; 5
     a14:	65 e2       	ldi	r22, 0x25	; 37
     a16:	70 e0       	ldi	r23, 0x00	; 0
     a18:	82 ea       	ldi	r24, 0xA2	; 162
     a1a:	92 e0       	ldi	r25, 0x02	; 2
     a1c:	0e 94 14 01 	call	0x228	; 0x228 <_ZN5z_lib4GpioC1EPVhhNS0_4ModeE>

Gpio sr_pins[3]      = {Gpio(&PORTD, PIND5, Gpio::Mode::OUT),
	                    Gpio(&PORTD, PIND6, Gpio::Mode::OUT),
                        Gpio(&PORTD, PIND7, Gpio::Mode::OUT)};
     a20:	21 e0       	ldi	r18, 0x01	; 1
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	45 e0       	ldi	r20, 0x05	; 5
     a26:	6b e2       	ldi	r22, 0x2B	; 43
     a28:	70 e0       	ldi	r23, 0x00	; 0
     a2a:	83 e9       	ldi	r24, 0x93	; 147
     a2c:	92 e0       	ldi	r25, 0x02	; 2
     a2e:	0e 94 14 01 	call	0x228	; 0x228 <_ZN5z_lib4GpioC1EPVhhNS0_4ModeE>
     a32:	21 e0       	ldi	r18, 0x01	; 1
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	46 e0       	ldi	r20, 0x06	; 6
     a38:	6b e2       	ldi	r22, 0x2B	; 43
     a3a:	70 e0       	ldi	r23, 0x00	; 0
     a3c:	86 e9       	ldi	r24, 0x96	; 150
     a3e:	92 e0       	ldi	r25, 0x02	; 2
     a40:	0e 94 14 01 	call	0x228	; 0x228 <_ZN5z_lib4GpioC1EPVhhNS0_4ModeE>
     a44:	21 e0       	ldi	r18, 0x01	; 1
     a46:	30 e0       	ldi	r19, 0x00	; 0
     a48:	47 e0       	ldi	r20, 0x07	; 7
     a4a:	6b e2       	ldi	r22, 0x2B	; 43
     a4c:	70 e0       	ldi	r23, 0x00	; 0
     a4e:	89 e9       	ldi	r24, 0x99	; 153
     a50:	92 e0       	ldi	r25, 0x02	; 2
     a52:	0e 94 14 01 	call	0x228	; 0x228 <_ZN5z_lib4GpioC1EPVhhNS0_4ModeE>
	
/* Peripheral setup */			   
ShiftReg      shift_reg  = ShiftReg(&sr_pins[0], &sr_pins[1], &sr_pins[2]);
     a56:	29 e9       	ldi	r18, 0x99	; 153
     a58:	32 e0       	ldi	r19, 0x02	; 2
     a5a:	46 e9       	ldi	r20, 0x96	; 150
     a5c:	52 e0       	ldi	r21, 0x02	; 2
     a5e:	63 e9       	ldi	r22, 0x93	; 147
     a60:	72 e0       	ldi	r23, 0x02	; 2
     a62:	89 e7       	ldi	r24, 0x79	; 121
     a64:	92 e0       	ldi	r25, 0x02	; 2
     a66:	0e 94 cf 06 	call	0xd9e	; 0xd9e <_ZN5z_lib8ShiftRegC1EPNS_4GpioES2_S2_>
SevenSegment  sev_seg    = SevenSegment(&sev_seg_gpio[0], &sev_seg_gpio[1], &sev_seg_gpio[2]);
     a6a:	22 ea       	ldi	r18, 0xA2	; 162
     a6c:	32 e0       	ldi	r19, 0x02	; 2
     a6e:	4f e9       	ldi	r20, 0x9F	; 159
     a70:	52 e0       	ldi	r21, 0x02	; 2
     a72:	6c e9       	ldi	r22, 0x9C	; 156
     a74:	72 e0       	ldi	r23, 0x02	; 2
     a76:	83 e7       	ldi	r24, 0x73	; 115
     a78:	92 e0       	ldi	r25, 0x02	; 2
     a7a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <_ZN5z_lib12SevenSegmentC1EPNS_4GpioES2_S2_>
Encoder       enc        = Encoder(&enc_pins[0], &enc_pins[1], 0, 7);
     a7e:	07 e0       	ldi	r16, 0x07	; 7
     a80:	20 e0       	ldi	r18, 0x00	; 0
     a82:	4d eb       	ldi	r20, 0xBD	; 189
     a84:	52 e0       	ldi	r21, 0x02	; 2
     a86:	6a eb       	ldi	r22, 0xBA	; 186
     a88:	72 e0       	ldi	r23, 0x02	; 2
     a8a:	8a e6       	ldi	r24, 0x6A	; 106
     a8c:	92 e0       	ldi	r25, 0x02	; 2
     a8e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_ZN5z_lib7EncoderC1EPNS_4GpioES2_hh>

Nco           oscillator = Nco(Wave::SINE);
     a92:	60 e0       	ldi	r22, 0x00	; 0
     a94:	70 e0       	ldi	r23, 0x00	; 0
     a96:	8e e5       	ldi	r24, 0x5E	; 94
     a98:	91 e0       	ldi	r25, 0x01	; 1
     a9a:	0e 94 62 06 	call	0xcc4	; 0xcc4 <_ZN5z_lib3NcoC1ENS_4WaveE>
Adsr          envelope   = Adsr(50,200,200,200);
     a9e:	08 ec       	ldi	r16, 0xC8	; 200
     aa0:	28 ec       	ldi	r18, 0xC8	; 200
     aa2:	48 ec       	ldi	r20, 0xC8	; 200
     aa4:	62 e3       	ldi	r22, 0x32	; 50
     aa6:	86 e5       	ldi	r24, 0x56	; 86
     aa8:	91 e0       	ldi	r25, 0x01	; 1
     aaa:	0e 94 af 00 	call	0x15e	; 0x15e <_ZN5z_lib4AdsrC1Ehhhh>
			pot_mux_sel[pin].clear();
		}
	}
	
	return adc_read(7);	
}
     aae:	0f 91       	pop	r16
     ab0:	08 95       	ret

00000ab2 <mcp4725_init>:
 */ 
#include "mcp4725.h"


void mcp4725_init(uint8_t address)
{
     ab2:	cf 93       	push	r28
     ab4:	c8 2f       	mov	r28, r24
	i2c_init();
     ab6:	0e 94 8e 01 	call	0x31c	; 0x31c <i2c_init>
	i2c_start(address << 1);
     aba:	8c 2f       	mov	r24, r28
     abc:	88 0f       	add	r24, r24
     abe:	0e 94 92 01 	call	0x324	; 0x324 <i2c_start>
}
     ac2:	cf 91       	pop	r28
     ac4:	08 95       	ret

00000ac6 <mcp4725_write>:

void mcp4725_write(uint16_t data)
{
     ac6:	cf 93       	push	r28
     ac8:	df 93       	push	r29
     aca:	ec 01       	movw	r28, r24
	i2c_transmit(MCP4725_ADDR << 1, (uint8_t*)WRITE_DAC, 8);
	i2c_transmit(MCP4725_ADDR << 1, (uint8_t*)(data >> 4), 8);
	i2c_transmit(MCP4725_ADDR << 1, (uint8_t*)((data & 0xF) << 4), 8);
	*/
	//i2c_start(MCP4725_ADDR << 1);
	i2c_write(WRITE_DAC);
     acc:	80 e4       	ldi	r24, 0x40	; 64
     ace:	0e 94 b7 01 	call	0x36e	; 0x36e <i2c_write>
	i2c_write(data >> 4);	        /* msb */
     ad2:	ce 01       	movw	r24, r28
     ad4:	92 95       	swap	r25
     ad6:	82 95       	swap	r24
     ad8:	8f 70       	andi	r24, 0x0F	; 15
     ada:	89 27       	eor	r24, r25
     adc:	9f 70       	andi	r25, 0x0F	; 15
     ade:	89 27       	eor	r24, r25
     ae0:	0e 94 b7 01 	call	0x36e	; 0x36e <i2c_write>
	i2c_write((data & 0xF) << 4);	/* lsb */
     ae4:	8c 2f       	mov	r24, r28
     ae6:	82 95       	swap	r24
     ae8:	80 7f       	andi	r24, 0xF0	; 240
     aea:	0e 94 b7 01 	call	0x36e	; 0x36e <i2c_write>
	//i2c_stop();
     aee:	df 91       	pop	r29
     af0:	cf 91       	pop	r28
     af2:	08 95       	ret

00000af4 <_ZN5z_lib3Nco11next_signalEv>:
		
		set_waveform(wave);
	}

	uint8_t Nco::next_signal(void)
	{
     af4:	cf 92       	push	r12
     af6:	df 92       	push	r13
     af8:	ef 92       	push	r14
     afa:	ff 92       	push	r15
     afc:	0f 93       	push	r16
     afe:	1f 93       	push	r17
     b00:	cf 93       	push	r28
     b02:	df 93       	push	r29
     b04:	ec 01       	movw	r28, r24
		phase += increment;
     b06:	8c 01       	movw	r16, r24
     b08:	0c 5f       	subi	r16, 0xFC	; 252
     b0a:	1e 4f       	sbci	r17, 0xFE	; 254
     b0c:	fc 01       	movw	r30, r24
     b0e:	e8 5f       	subi	r30, 0xF8	; 248
     b10:	fe 4f       	sbci	r31, 0xFE	; 254
     b12:	20 81       	ld	r18, Z
     b14:	31 81       	ldd	r19, Z+1	; 0x01
     b16:	42 81       	ldd	r20, Z+2	; 0x02
     b18:	53 81       	ldd	r21, Z+3	; 0x03
     b1a:	f8 01       	movw	r30, r16
     b1c:	60 81       	ld	r22, Z
     b1e:	71 81       	ldd	r23, Z+1	; 0x01
     b20:	82 81       	ldd	r24, Z+2	; 0x02
     b22:	93 81       	ldd	r25, Z+3	; 0x03
     b24:	0e 94 35 07 	call	0xe6a	; 0xe6a <__addsf3>
     b28:	6b 01       	movw	r12, r22
     b2a:	7c 01       	movw	r14, r24
     b2c:	f8 01       	movw	r30, r16
     b2e:	60 83       	st	Z, r22
     b30:	71 83       	std	Z+1, r23	; 0x01
     b32:	82 83       	std	Z+2, r24	; 0x02
     b34:	93 83       	std	Z+3, r25	; 0x03

		while(phase >= LUT_LENGTH)
     b36:	20 e0       	ldi	r18, 0x00	; 0
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	40 e8       	ldi	r20, 0x80	; 128
     b3c:	53 e4       	ldi	r21, 0x43	; 67
     b3e:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <__gesf2>
     b42:	88 23       	and	r24, r24
     b44:	cc f0       	brlt	.+50     	; 0xb78 <_ZN5z_lib3Nco11next_signalEv+0x84>
		{
			phase -= LUT_LENGTH;
     b46:	20 e0       	ldi	r18, 0x00	; 0
     b48:	30 e0       	ldi	r19, 0x00	; 0
     b4a:	40 e8       	ldi	r20, 0x80	; 128
     b4c:	53 e4       	ldi	r21, 0x43	; 67
     b4e:	c7 01       	movw	r24, r14
     b50:	b6 01       	movw	r22, r12
     b52:	0e 94 34 07 	call	0xe68	; 0xe68 <__subsf3>
     b56:	6b 01       	movw	r12, r22
     b58:	7c 01       	movw	r14, r24

	uint8_t Nco::next_signal(void)
	{
		phase += increment;

		while(phase >= LUT_LENGTH)
     b5a:	20 e0       	ldi	r18, 0x00	; 0
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	40 e8       	ldi	r20, 0x80	; 128
     b60:	53 e4       	ldi	r21, 0x43	; 67
     b62:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <__gesf2>
     b66:	88 23       	and	r24, r24
     b68:	74 f7       	brge	.-36     	; 0xb46 <_ZN5z_lib3Nco11next_signalEv+0x52>
     b6a:	fe 01       	movw	r30, r28
     b6c:	ec 5f       	subi	r30, 0xFC	; 252
     b6e:	fe 4f       	sbci	r31, 0xFE	; 254
     b70:	c0 82       	st	Z, r12
     b72:	d1 82       	std	Z+1, r13	; 0x01
     b74:	e2 82       	std	Z+2, r14	; 0x02
     b76:	f3 82       	std	Z+3, r15	; 0x03
		{
			phase -= LUT_LENGTH;
		}
		
		return lut[(uint16_t)phase];
     b78:	c7 01       	movw	r24, r14
     b7a:	b6 01       	movw	r22, r12
     b7c:	0e 94 13 08 	call	0x1026	; 0x1026 <__fixunssfsi>
     b80:	c6 0f       	add	r28, r22
     b82:	d7 1f       	adc	r29, r23
	}
     b84:	88 81       	ld	r24, Y
     b86:	df 91       	pop	r29
     b88:	cf 91       	pop	r28
     b8a:	1f 91       	pop	r17
     b8c:	0f 91       	pop	r16
     b8e:	ff 90       	pop	r15
     b90:	ef 90       	pop	r14
     b92:	df 90       	pop	r13
     b94:	cf 90       	pop	r12
     b96:	08 95       	ret

00000b98 <_ZN5z_lib3Nco13set_frequencyEf>:

	void Nco::set_frequency(float freq)
	{
     b98:	0f 93       	push	r16
     b9a:	1f 93       	push	r17
     b9c:	cf 93       	push	r28
     b9e:	df 93       	push	r29
     ba0:	9c 01       	movw	r18, r24
     ba2:	cb 01       	movw	r24, r22
     ba4:	ba 01       	movw	r22, r20
		increment = LUT_LENGTH * freq * interrupt_period;
     ba6:	89 01       	movw	r16, r18
     ba8:	08 5f       	subi	r16, 0xF8	; 248
     baa:	1e 4f       	sbci	r17, 0xFE	; 254
     bac:	e9 01       	movw	r28, r18
     bae:	d3 95       	inc	r29
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	40 e8       	ldi	r20, 0x80	; 128
     bb6:	53 e4       	ldi	r21, 0x43	; 67
     bb8:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__mulsf3>
     bbc:	9b 01       	movw	r18, r22
     bbe:	ac 01       	movw	r20, r24
     bc0:	68 81       	ld	r22, Y
     bc2:	79 81       	ldd	r23, Y+1	; 0x01
     bc4:	8a 81       	ldd	r24, Y+2	; 0x02
     bc6:	9b 81       	ldd	r25, Y+3	; 0x03
     bc8:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__mulsf3>
     bcc:	f8 01       	movw	r30, r16
     bce:	60 83       	st	Z, r22
     bd0:	71 83       	std	Z+1, r23	; 0x01
     bd2:	82 83       	std	Z+2, r24	; 0x02
     bd4:	93 83       	std	Z+3, r25	; 0x03
	}
     bd6:	df 91       	pop	r29
     bd8:	cf 91       	pop	r28
     bda:	1f 91       	pop	r17
     bdc:	0f 91       	pop	r16
     bde:	08 95       	ret

00000be0 <_ZN5z_lib3Nco12set_waveformENS_4WaveE>:
	
	void Nco::set_waveform(Wave wave)
	{
     be0:	0f 93       	push	r16
     be2:	1f 93       	push	r17
     be4:	cf 93       	push	r28
     be6:	df 93       	push	r29
		switch(wave)
     be8:	61 30       	cpi	r22, 0x01	; 1
     bea:	71 05       	cpc	r23, r1
     bec:	09 f4       	brne	.+2      	; 0xbf0 <_ZN5z_lib3Nco12set_waveformENS_4WaveE+0x10>
     bee:	41 c0       	rjmp	.+130    	; 0xc72 <_ZN5z_lib3Nco12set_waveformENS_4WaveE+0x92>
     bf0:	1c f4       	brge	.+6      	; 0xbf8 <_ZN5z_lib3Nco12set_waveformENS_4WaveE+0x18>
     bf2:	67 2b       	or	r22, r23
     bf4:	51 f0       	breq	.+20     	; 0xc0a <_ZN5z_lib3Nco12set_waveformENS_4WaveE+0x2a>
     bf6:	61 c0       	rjmp	.+194    	; 0xcba <_ZN5z_lib3Nco12set_waveformENS_4WaveE+0xda>
     bf8:	63 30       	cpi	r22, 0x03	; 3
     bfa:	71 05       	cpc	r23, r1
     bfc:	09 f4       	brne	.+2      	; 0xc00 <_ZN5z_lib3Nco12set_waveformENS_4WaveE+0x20>
     bfe:	4a c0       	rjmp	.+148    	; 0xc94 <_ZN5z_lib3Nco12set_waveformENS_4WaveE+0xb4>
     c00:	64 30       	cpi	r22, 0x04	; 4
     c02:	71 05       	cpc	r23, r1
     c04:	09 f4       	brne	.+2      	; 0xc08 <_ZN5z_lib3Nco12set_waveformENS_4WaveE+0x28>
     c06:	4f c0       	rjmp	.+158    	; 0xca6 <_ZN5z_lib3Nco12set_waveformENS_4WaveE+0xc6>
     c08:	58 c0       	rjmp	.+176    	; 0xcba <_ZN5z_lib3Nco12set_waveformENS_4WaveE+0xda>
     c0a:	ec 01       	movw	r28, r24
     c0c:	00 e0       	ldi	r16, 0x00	; 0
     c0e:	10 e0       	ldi	r17, 0x00	; 0
		{
			case Wave::SINE:
				for(int n = 0; n < LUT_LENGTH; ++n)
				{
					lut[n] = 255 * ((sin(2. * M_PI * n / LUT_LENGTH) + 1) / 2);
     c10:	b8 01       	movw	r22, r16
     c12:	01 2e       	mov	r0, r17
     c14:	00 0c       	add	r0, r0
     c16:	88 0b       	sbc	r24, r24
     c18:	99 0b       	sbc	r25, r25
     c1a:	0e 94 44 08 	call	0x1088	; 0x1088 <__floatsisf>
     c1e:	2b ed       	ldi	r18, 0xDB	; 219
     c20:	3f e0       	ldi	r19, 0x0F	; 15
     c22:	49 ec       	ldi	r20, 0xC9	; 201
     c24:	50 e4       	ldi	r21, 0x40	; 64
     c26:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__mulsf3>
     c2a:	20 e0       	ldi	r18, 0x00	; 0
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	40 e8       	ldi	r20, 0x80	; 128
     c30:	5b e3       	ldi	r21, 0x3B	; 59
     c32:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__mulsf3>
     c36:	0e 94 b6 09 	call	0x136c	; 0x136c <sin>
     c3a:	20 e0       	ldi	r18, 0x00	; 0
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	40 e8       	ldi	r20, 0x80	; 128
     c40:	5f e3       	ldi	r21, 0x3F	; 63
     c42:	0e 94 35 07 	call	0xe6a	; 0xe6a <__addsf3>
     c46:	20 e0       	ldi	r18, 0x00	; 0
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	40 e0       	ldi	r20, 0x00	; 0
     c4c:	5f e3       	ldi	r21, 0x3F	; 63
     c4e:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__mulsf3>
     c52:	20 e0       	ldi	r18, 0x00	; 0
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	4f e7       	ldi	r20, 0x7F	; 127
     c58:	53 e4       	ldi	r21, 0x43	; 67
     c5a:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__mulsf3>
     c5e:	0e 94 13 08 	call	0x1026	; 0x1026 <__fixunssfsi>
     c62:	69 93       	st	Y+, r22
	void Nco::set_waveform(Wave wave)
	{
		switch(wave)
		{
			case Wave::SINE:
				for(int n = 0; n < LUT_LENGTH; ++n)
     c64:	0f 5f       	subi	r16, 0xFF	; 255
     c66:	1f 4f       	sbci	r17, 0xFF	; 255
     c68:	01 15       	cp	r16, r1
     c6a:	31 e0       	ldi	r19, 0x01	; 1
     c6c:	13 07       	cpc	r17, r19
     c6e:	81 f6       	brne	.-96     	; 0xc10 <_ZN5z_lib3Nco12set_waveformENS_4WaveE+0x30>
     c70:	24 c0       	rjmp	.+72     	; 0xcba <_ZN5z_lib3Nco12set_waveformENS_4WaveE+0xda>
     c72:	fc 01       	movw	r30, r24
		increment = LUT_LENGTH * freq * interrupt_period;
	}
	
	void Nco::set_waveform(Wave wave)
	{
		switch(wave)
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	90 e0       	ldi	r25, 0x00	; 0
			case Wave::SQUARE:
				for(int n = 0; n < LUT_LENGTH; ++n)
				{
					if(n < (LUT_LENGTH / 2))
					{
						lut[n] = 127;
     c78:	2f e7       	ldi	r18, 0x7F	; 127
				break;

			case Wave::SQUARE:
				for(int n = 0; n < LUT_LENGTH; ++n)
				{
					if(n < (LUT_LENGTH / 2))
     c7a:	80 38       	cpi	r24, 0x80	; 128
     c7c:	91 05       	cpc	r25, r1
     c7e:	14 f4       	brge	.+4      	; 0xc84 <_ZN5z_lib3Nco12set_waveformENS_4WaveE+0xa4>
					{
						lut[n] = 127;
     c80:	20 83       	st	Z, r18
     c82:	01 c0       	rjmp	.+2      	; 0xc86 <_ZN5z_lib3Nco12set_waveformENS_4WaveE+0xa6>
					}
					else
					{
						lut[n] = 0;
     c84:	10 82       	st	Z, r1
					lut[n] = 255 * ((sin(2. * M_PI * n / LUT_LENGTH) + 1) / 2);
				}
				break;

			case Wave::SQUARE:
				for(int n = 0; n < LUT_LENGTH; ++n)
     c86:	01 96       	adiw	r24, 0x01	; 1
     c88:	31 96       	adiw	r30, 0x01	; 1
     c8a:	81 15       	cp	r24, r1
     c8c:	31 e0       	ldi	r19, 0x01	; 1
     c8e:	93 07       	cpc	r25, r19
     c90:	a1 f7       	brne	.-24     	; 0xc7a <_ZN5z_lib3Nco12set_waveformENS_4WaveE+0x9a>
     c92:	13 c0       	rjmp	.+38     	; 0xcba <_ZN5z_lib3Nco12set_waveformENS_4WaveE+0xda>
     c94:	fc 01       	movw	r30, r24
     c96:	93 95       	inc	r25
		increment = LUT_LENGTH * freq * interrupt_period;
	}
	
	void Nco::set_waveform(Wave wave)
	{
		switch(wave)
     c98:	20 e0       	ldi	r18, 0x00	; 0
				break;

			case Wave::SAW:
				for(int n = 0; n < LUT_LENGTH; ++n)
				{
					lut[n] = n;
     c9a:	21 93       	st	Z+, r18
     c9c:	2f 5f       	subi	r18, 0xFF	; 255

			case Wave::TRIANGLE:
				break;

			case Wave::SAW:
				for(int n = 0; n < LUT_LENGTH; ++n)
     c9e:	e8 17       	cp	r30, r24
     ca0:	f9 07       	cpc	r31, r25
     ca2:	d9 f7       	brne	.-10     	; 0xc9a <_ZN5z_lib3Nco12set_waveformENS_4WaveE+0xba>
     ca4:	0a c0       	rjmp	.+20     	; 0xcba <_ZN5z_lib3Nco12set_waveformENS_4WaveE+0xda>
     ca6:	fc 01       	movw	r30, r24
     ca8:	ef 5f       	subi	r30, 0xFF	; 255
     caa:	fe 4f       	sbci	r31, 0xFE	; 254
     cac:	01 96       	adiw	r24, 0x01	; 1
		increment = LUT_LENGTH * freq * interrupt_period;
	}
	
	void Nco::set_waveform(Wave wave)
	{
		switch(wave)
     cae:	20 e0       	ldi	r18, 0x00	; 0
				break;

			case Wave::REV_SAW:
				for(int n = LUT_LENGTH; n > 0; --n)
				{
					lut[n] = n;
     cb0:	22 93       	st	-Z, r18
     cb2:	21 50       	subi	r18, 0x01	; 1
					lut[n] = n;
				}
				break;

			case Wave::REV_SAW:
				for(int n = LUT_LENGTH; n > 0; --n)
     cb4:	8e 17       	cp	r24, r30
     cb6:	9f 07       	cpc	r25, r31
     cb8:	d9 f7       	brne	.-10     	; 0xcb0 <_ZN5z_lib3Nco12set_waveformENS_4WaveE+0xd0>
				{
					lut[n] = n;
				}
				break;
		}
	}
     cba:	df 91       	pop	r29
     cbc:	cf 91       	pop	r28
     cbe:	1f 91       	pop	r17
     cc0:	0f 91       	pop	r16
     cc2:	08 95       	ret

00000cc4 <_ZN5z_lib3NcoC1ENS_4WaveE>:
 */ 
#include "nco.h"

namespace z_lib
{
	Nco::Nco(Wave wave)
     cc4:	0f 93       	push	r16
     cc6:	1f 93       	push	r17
	{
		interrupt_period = (1.0 / F_CLK);
     cc8:	fc 01       	movw	r30, r24
     cca:	f3 95       	inc	r31
     ccc:	07 e1       	ldi	r16, 0x17	; 23
     cce:	17 eb       	ldi	r17, 0xB7	; 183
     cd0:	21 e5       	ldi	r18, 0x51	; 81
     cd2:	39 e3       	ldi	r19, 0x39	; 57
     cd4:	00 83       	st	Z, r16
     cd6:	11 83       	std	Z+1, r17	; 0x01
     cd8:	22 83       	std	Z+2, r18	; 0x02
     cda:	33 83       	std	Z+3, r19	; 0x03
		phase            = 0.0;
     cdc:	34 96       	adiw	r30, 0x04	; 4
     cde:	10 82       	st	Z, r1
     ce0:	11 82       	std	Z+1, r1	; 0x01
     ce2:	12 82       	std	Z+2, r1	; 0x02
     ce4:	13 82       	std	Z+3, r1	; 0x03
		increment        = 0.0;
     ce6:	34 96       	adiw	r30, 0x04	; 4
     ce8:	10 82       	st	Z, r1
     cea:	11 82       	std	Z+1, r1	; 0x01
     cec:	12 82       	std	Z+2, r1	; 0x02
     cee:	13 82       	std	Z+3, r1	; 0x03
		
		set_waveform(wave);
     cf0:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <_ZN5z_lib3Nco12set_waveformENS_4WaveE>
	}
     cf4:	1f 91       	pop	r17
     cf6:	0f 91       	pop	r16
     cf8:	08 95       	ret

00000cfa <_ZN5z_lib12SevenSegmentC1EPNS_4GpioES2_S2_>:

#include "seven_segment.h"

namespace z_lib
{
	SevenSegment::SevenSegment(Gpio* data, Gpio* clk, Gpio* latch)
     cfa:	fc 01       	movw	r30, r24
	{
		this->data = data;
     cfc:	71 83       	std	Z+1, r23	; 0x01
     cfe:	60 83       	st	Z, r22
		this->clk = clk;
     d00:	53 83       	std	Z+3, r21	; 0x03
     d02:	42 83       	std	Z+2, r20	; 0x02
		this->latch = latch;
     d04:	35 83       	std	Z+5, r19	; 0x05
     d06:	24 83       	std	Z+4, r18	; 0x04
     d08:	08 95       	ret

00000d0a <_ZN5z_lib12SevenSegment13write_to_dispEh>:
	{
		write_to_disp(LETTERS[get_letter(letter)]);
	}
	
	void SevenSegment::write_to_disp(uint8_t character)
	{
     d0a:	ef 92       	push	r14
     d0c:	ff 92       	push	r15
     d0e:	0f 93       	push	r16
     d10:	1f 93       	push	r17
     d12:	cf 93       	push	r28
     d14:	df 93       	push	r29
     d16:	8c 01       	movw	r16, r24
     d18:	e6 2e       	mov	r14, r22
		this->latch->clear();
     d1a:	fc 01       	movw	r30, r24
     d1c:	84 81       	ldd	r24, Z+4	; 0x04
     d1e:	95 81       	ldd	r25, Z+5	; 0x05
     d20:	0e 94 68 01 	call	0x2d0	; 0x2d0 <_ZN5z_lib4Gpio5clearEv>
     d24:	c0 e0       	ldi	r28, 0x00	; 0
     d26:	d0 e0       	ldi	r29, 0x00	; 0

		for(uint8_t segment = 0; segment < SEGMENTS; ++segment)
		{
			this->clk->clear();
			
			if(character & (0x01 << segment))
     d28:	f1 2c       	mov	r15, r1
	{
		this->latch->clear();

		for(uint8_t segment = 0; segment < SEGMENTS; ++segment)
		{
			this->clk->clear();
     d2a:	f8 01       	movw	r30, r16
     d2c:	82 81       	ldd	r24, Z+2	; 0x02
     d2e:	93 81       	ldd	r25, Z+3	; 0x03
     d30:	0e 94 68 01 	call	0x2d0	; 0x2d0 <_ZN5z_lib4Gpio5clearEv>
			
			if(character & (0x01 << segment))
     d34:	c7 01       	movw	r24, r14
     d36:	0c 2e       	mov	r0, r28
     d38:	02 c0       	rjmp	.+4      	; 0xd3e <_ZN5z_lib12SevenSegment13write_to_dispEh+0x34>
     d3a:	95 95       	asr	r25
     d3c:	87 95       	ror	r24
     d3e:	0a 94       	dec	r0
     d40:	e2 f7       	brpl	.-8      	; 0xd3a <_ZN5z_lib12SevenSegment13write_to_dispEh+0x30>
     d42:	80 ff       	sbrs	r24, 0
     d44:	06 c0       	rjmp	.+12     	; 0xd52 <_ZN5z_lib12SevenSegment13write_to_dispEh+0x48>
			{
				this->data->clear();
     d46:	f8 01       	movw	r30, r16
     d48:	80 81       	ld	r24, Z
     d4a:	91 81       	ldd	r25, Z+1	; 0x01
     d4c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <_ZN5z_lib4Gpio5clearEv>
     d50:	05 c0       	rjmp	.+10     	; 0xd5c <_ZN5z_lib12SevenSegment13write_to_dispEh+0x52>
			}
			else
			{
				this->data->set();
     d52:	f8 01       	movw	r30, r16
     d54:	80 81       	ld	r24, Z
     d56:	91 81       	ldd	r25, Z+1	; 0x01
     d58:	0e 94 56 01 	call	0x2ac	; 0x2ac <_ZN5z_lib4Gpio3setEv>
			}
			this->clk->set();
     d5c:	f8 01       	movw	r30, r16
     d5e:	82 81       	ldd	r24, Z+2	; 0x02
     d60:	93 81       	ldd	r25, Z+3	; 0x03
     d62:	0e 94 56 01 	call	0x2ac	; 0x2ac <_ZN5z_lib4Gpio3setEv>
     d66:	21 96       	adiw	r28, 0x01	; 1
	
	void SevenSegment::write_to_disp(uint8_t character)
	{
		this->latch->clear();

		for(uint8_t segment = 0; segment < SEGMENTS; ++segment)
     d68:	c7 30       	cpi	r28, 0x07	; 7
     d6a:	d1 05       	cpc	r29, r1
     d6c:	f1 f6       	brne	.-68     	; 0xd2a <_ZN5z_lib12SevenSegment13write_to_dispEh+0x20>
			{
				this->data->set();
			}
			this->clk->set();
		}
		this->latch->set();
     d6e:	f8 01       	movw	r30, r16
     d70:	84 81       	ldd	r24, Z+4	; 0x04
     d72:	95 81       	ldd	r25, Z+5	; 0x05
     d74:	0e 94 56 01 	call	0x2ac	; 0x2ac <_ZN5z_lib4Gpio3setEv>
	}
     d78:	df 91       	pop	r29
     d7a:	cf 91       	pop	r28
     d7c:	1f 91       	pop	r17
     d7e:	0f 91       	pop	r16
     d80:	ff 90       	pop	r15
     d82:	ef 90       	pop	r14
     d84:	08 95       	ret

00000d86 <_ZN5z_lib12SevenSegment7set_numEh>:
	
	void SevenSegment::set_num(uint8_t num)
	{
		uint8_t digit = 0;
		
		if(num < NUM_DIGITS)
     d86:	6a 30       	cpi	r22, 0x0A	; 10
     d88:	30 f4       	brcc	.+12     	; 0xd96 <_ZN5z_lib12SevenSegment7set_numEh+0x10>
		{
			digit = DIGITS[num];
     d8a:	e6 2f       	mov	r30, r22
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	e4 5c       	subi	r30, 0xC4	; 196
     d90:	fe 4f       	sbci	r31, 0xFE	; 254
     d92:	60 81       	ld	r22, Z
     d94:	01 c0       	rjmp	.+2      	; 0xd98 <_ZN5z_lib12SevenSegment7set_numEh+0x12>
		this->latch = latch;
	}
	
	void SevenSegment::set_num(uint8_t num)
	{
		uint8_t digit = 0;
     d96:	60 e0       	ldi	r22, 0x00	; 0
		
		if(num < NUM_DIGITS)
		{
			digit = DIGITS[num];
		}
		write_to_disp(digit);
     d98:	0e 94 85 06 	call	0xd0a	; 0xd0a <_ZN5z_lib12SevenSegment13write_to_dispEh>
     d9c:	08 95       	ret

00000d9e <_ZN5z_lib8ShiftRegC1EPNS_4GpioES2_S2_>:
		this->mode  = Mode::POINT;
	}

	void ShiftReg::set_mode(Mode mode)
	{
		this->mode = mode;
     d9e:	cf 93       	push	r28
     da0:	df 93       	push	r29
     da2:	ec 01       	movw	r28, r24
     da4:	82 e1       	ldi	r24, 0x12	; 18
     da6:	ea e2       	ldi	r30, 0x2A	; 42
     da8:	f1 e0       	ldi	r31, 0x01	; 1
     daa:	de 01       	movw	r26, r28
     dac:	18 96       	adiw	r26, 0x08	; 8
     dae:	01 90       	ld	r0, Z+
     db0:	0d 92       	st	X+, r0
     db2:	8a 95       	dec	r24
     db4:	e1 f7       	brne	.-8      	; 0xdae <_ZN5z_lib8ShiftRegC1EPNS_4GpioES2_S2_+0x10>
     db6:	79 83       	std	Y+1, r23	; 0x01
     db8:	68 83       	st	Y, r22
     dba:	5b 83       	std	Y+3, r21	; 0x03
     dbc:	4a 83       	std	Y+2, r20	; 0x02
     dbe:	3d 83       	std	Y+5, r19	; 0x05
     dc0:	2c 83       	std	Y+4, r18	; 0x04
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	9f 83       	std	Y+7, r25	; 0x07
     dc8:	8e 83       	std	Y+6, r24	; 0x06
     dca:	df 91       	pop	r29
     dcc:	cf 91       	pop	r28
     dce:	08 95       	ret

00000dd0 <_ZN5z_lib8ShiftReg9set_valueEh>:
	}
	
	void ShiftReg::set_value(uint8_t display_val)
	{
     dd0:	cf 92       	push	r12
     dd2:	df 92       	push	r13
     dd4:	ef 92       	push	r14
     dd6:	ff 92       	push	r15
     dd8:	0f 93       	push	r16
     dda:	1f 93       	push	r17
     ddc:	cf 93       	push	r28
     dde:	df 93       	push	r29
     de0:	8c 01       	movw	r16, r24
     de2:	c6 2f       	mov	r28, r22
		if(display_val <= TOTAL_BITS)
		{
			register_val = BAR_MAP[display_val];
		}
		
		latch->clear();
     de4:	fc 01       	movw	r30, r24
     de6:	82 81       	ldd	r24, Z+2	; 0x02
     de8:	93 81       	ldd	r25, Z+3	; 0x03
     dea:	0e 94 68 01 	call	0x2d0	; 0x2d0 <_ZN5z_lib4Gpio5clearEv>
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	7c 01       	movw	r14, r24
     df4:	02 c0       	rjmp	.+4      	; 0xdfa <_ZN5z_lib8ShiftReg9set_valueEh+0x2a>
     df6:	ee 0c       	add	r14, r14
     df8:	ff 1c       	adc	r15, r15
     dfa:	ca 95       	dec	r28
     dfc:	e2 f7       	brpl	.-8      	; 0xdf6 <_ZN5z_lib8ShiftReg9set_valueEh+0x26>
		
#ifdef REGISTER_BACKWARDS

		/* To make leds visible in correct order on devboard*/
		for(int led = TOTAL_BITS; led >= 0; --led)
     dfe:	c8 e0       	ldi	r28, 0x08	; 8
     e00:	d0 e0       	ldi	r29, 0x00	; 0
		{
			clock->clear();

			if((0x01 << display_val) & (0x01 << led))
     e02:	cc 24       	eor	r12, r12
     e04:	c3 94       	inc	r12
     e06:	d1 2c       	mov	r13, r1
#ifdef REGISTER_BACKWARDS

		/* To make leds visible in correct order on devboard*/
		for(int led = TOTAL_BITS; led >= 0; --led)
		{
			clock->clear();
     e08:	f8 01       	movw	r30, r16
     e0a:	84 81       	ldd	r24, Z+4	; 0x04
     e0c:	95 81       	ldd	r25, Z+5	; 0x05
     e0e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <_ZN5z_lib4Gpio5clearEv>

			if((0x01 << display_val) & (0x01 << led))
     e12:	c6 01       	movw	r24, r12
     e14:	0c 2e       	mov	r0, r28
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <_ZN5z_lib8ShiftReg9set_valueEh+0x4c>
     e18:	88 0f       	add	r24, r24
     e1a:	99 1f       	adc	r25, r25
     e1c:	0a 94       	dec	r0
     e1e:	e2 f7       	brpl	.-8      	; 0xe18 <_ZN5z_lib8ShiftReg9set_valueEh+0x48>
     e20:	8e 21       	and	r24, r14
     e22:	9f 21       	and	r25, r15
     e24:	89 2b       	or	r24, r25
     e26:	31 f0       	breq	.+12     	; 0xe34 <_ZN5z_lib8ShiftReg9set_valueEh+0x64>
			{
				data->set();
     e28:	f8 01       	movw	r30, r16
     e2a:	80 81       	ld	r24, Z
     e2c:	91 81       	ldd	r25, Z+1	; 0x01
     e2e:	0e 94 56 01 	call	0x2ac	; 0x2ac <_ZN5z_lib4Gpio3setEv>
     e32:	05 c0       	rjmp	.+10     	; 0xe3e <_ZN5z_lib8ShiftReg9set_valueEh+0x6e>
			}
			else
			{
				data->clear();
     e34:	f8 01       	movw	r30, r16
     e36:	80 81       	ld	r24, Z
     e38:	91 81       	ldd	r25, Z+1	; 0x01
     e3a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <_ZN5z_lib4Gpio5clearEv>
			}
			clock->set();
     e3e:	f8 01       	movw	r30, r16
     e40:	84 81       	ldd	r24, Z+4	; 0x04
     e42:	95 81       	ldd	r25, Z+5	; 0x05
     e44:	0e 94 56 01 	call	0x2ac	; 0x2ac <_ZN5z_lib4Gpio3setEv>
		latch->clear();
		
#ifdef REGISTER_BACKWARDS

		/* To make leds visible in correct order on devboard*/
		for(int led = TOTAL_BITS; led >= 0; --led)
     e48:	21 97       	sbiw	r28, 0x01	; 1
     e4a:	f0 f6       	brcc	.-68     	; 0xe08 <_ZN5z_lib8ShiftReg9set_valueEh+0x38>
			{
				data->clear();
			}
			clock->set();
		}
		latch->set();
     e4c:	f8 01       	movw	r30, r16
     e4e:	82 81       	ldd	r24, Z+2	; 0x02
     e50:	93 81       	ldd	r25, Z+3	; 0x03
     e52:	0e 94 56 01 	call	0x2ac	; 0x2ac <_ZN5z_lib4Gpio3setEv>
			clock->set();
		}
		
#endif		

	}
     e56:	df 91       	pop	r29
     e58:	cf 91       	pop	r28
     e5a:	1f 91       	pop	r17
     e5c:	0f 91       	pop	r16
     e5e:	ff 90       	pop	r15
     e60:	ef 90       	pop	r14
     e62:	df 90       	pop	r13
     e64:	cf 90       	pop	r12
     e66:	08 95       	ret

00000e68 <__subsf3>:
     e68:	50 58       	subi	r21, 0x80	; 128

00000e6a <__addsf3>:
     e6a:	bb 27       	eor	r27, r27
     e6c:	aa 27       	eor	r26, r26
     e6e:	0e 94 4c 07 	call	0xe98	; 0xe98 <__addsf3x>
     e72:	0c 94 ba 08 	jmp	0x1174	; 0x1174 <__fp_round>
     e76:	0e 94 ac 08 	call	0x1158	; 0x1158 <__fp_pscA>
     e7a:	38 f0       	brcs	.+14     	; 0xe8a <__addsf3+0x20>
     e7c:	0e 94 b3 08 	call	0x1166	; 0x1166 <__fp_pscB>
     e80:	20 f0       	brcs	.+8      	; 0xe8a <__addsf3+0x20>
     e82:	39 f4       	brne	.+14     	; 0xe92 <__addsf3+0x28>
     e84:	9f 3f       	cpi	r25, 0xFF	; 255
     e86:	19 f4       	brne	.+6      	; 0xe8e <__addsf3+0x24>
     e88:	26 f4       	brtc	.+8      	; 0xe92 <__addsf3+0x28>
     e8a:	0c 94 a9 08 	jmp	0x1152	; 0x1152 <__fp_nan>
     e8e:	0e f4       	brtc	.+2      	; 0xe92 <__addsf3+0x28>
     e90:	e0 95       	com	r30
     e92:	e7 fb       	bst	r30, 7
     e94:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <__fp_inf>

00000e98 <__addsf3x>:
     e98:	e9 2f       	mov	r30, r25
     e9a:	0e 94 cb 08 	call	0x1196	; 0x1196 <__fp_split3>
     e9e:	58 f3       	brcs	.-42     	; 0xe76 <__addsf3+0xc>
     ea0:	ba 17       	cp	r27, r26
     ea2:	62 07       	cpc	r22, r18
     ea4:	73 07       	cpc	r23, r19
     ea6:	84 07       	cpc	r24, r20
     ea8:	95 07       	cpc	r25, r21
     eaa:	20 f0       	brcs	.+8      	; 0xeb4 <__addsf3x+0x1c>
     eac:	79 f4       	brne	.+30     	; 0xecc <__addsf3x+0x34>
     eae:	a6 f5       	brtc	.+104    	; 0xf18 <__addsf3x+0x80>
     eb0:	0c 94 ed 08 	jmp	0x11da	; 0x11da <__fp_zero>
     eb4:	0e f4       	brtc	.+2      	; 0xeb8 <__addsf3x+0x20>
     eb6:	e0 95       	com	r30
     eb8:	0b 2e       	mov	r0, r27
     eba:	ba 2f       	mov	r27, r26
     ebc:	a0 2d       	mov	r26, r0
     ebe:	0b 01       	movw	r0, r22
     ec0:	b9 01       	movw	r22, r18
     ec2:	90 01       	movw	r18, r0
     ec4:	0c 01       	movw	r0, r24
     ec6:	ca 01       	movw	r24, r20
     ec8:	a0 01       	movw	r20, r0
     eca:	11 24       	eor	r1, r1
     ecc:	ff 27       	eor	r31, r31
     ece:	59 1b       	sub	r21, r25
     ed0:	99 f0       	breq	.+38     	; 0xef8 <__addsf3x+0x60>
     ed2:	59 3f       	cpi	r21, 0xF9	; 249
     ed4:	50 f4       	brcc	.+20     	; 0xeea <__addsf3x+0x52>
     ed6:	50 3e       	cpi	r21, 0xE0	; 224
     ed8:	68 f1       	brcs	.+90     	; 0xf34 <__addsf3x+0x9c>
     eda:	1a 16       	cp	r1, r26
     edc:	f0 40       	sbci	r31, 0x00	; 0
     ede:	a2 2f       	mov	r26, r18
     ee0:	23 2f       	mov	r18, r19
     ee2:	34 2f       	mov	r19, r20
     ee4:	44 27       	eor	r20, r20
     ee6:	58 5f       	subi	r21, 0xF8	; 248
     ee8:	f3 cf       	rjmp	.-26     	; 0xed0 <__addsf3x+0x38>
     eea:	46 95       	lsr	r20
     eec:	37 95       	ror	r19
     eee:	27 95       	ror	r18
     ef0:	a7 95       	ror	r26
     ef2:	f0 40       	sbci	r31, 0x00	; 0
     ef4:	53 95       	inc	r21
     ef6:	c9 f7       	brne	.-14     	; 0xeea <__addsf3x+0x52>
     ef8:	7e f4       	brtc	.+30     	; 0xf18 <__addsf3x+0x80>
     efa:	1f 16       	cp	r1, r31
     efc:	ba 0b       	sbc	r27, r26
     efe:	62 0b       	sbc	r22, r18
     f00:	73 0b       	sbc	r23, r19
     f02:	84 0b       	sbc	r24, r20
     f04:	ba f0       	brmi	.+46     	; 0xf34 <__addsf3x+0x9c>
     f06:	91 50       	subi	r25, 0x01	; 1
     f08:	a1 f0       	breq	.+40     	; 0xf32 <__addsf3x+0x9a>
     f0a:	ff 0f       	add	r31, r31
     f0c:	bb 1f       	adc	r27, r27
     f0e:	66 1f       	adc	r22, r22
     f10:	77 1f       	adc	r23, r23
     f12:	88 1f       	adc	r24, r24
     f14:	c2 f7       	brpl	.-16     	; 0xf06 <__addsf3x+0x6e>
     f16:	0e c0       	rjmp	.+28     	; 0xf34 <__addsf3x+0x9c>
     f18:	ba 0f       	add	r27, r26
     f1a:	62 1f       	adc	r22, r18
     f1c:	73 1f       	adc	r23, r19
     f1e:	84 1f       	adc	r24, r20
     f20:	48 f4       	brcc	.+18     	; 0xf34 <__addsf3x+0x9c>
     f22:	87 95       	ror	r24
     f24:	77 95       	ror	r23
     f26:	67 95       	ror	r22
     f28:	b7 95       	ror	r27
     f2a:	f7 95       	ror	r31
     f2c:	9e 3f       	cpi	r25, 0xFE	; 254
     f2e:	08 f0       	brcs	.+2      	; 0xf32 <__addsf3x+0x9a>
     f30:	b0 cf       	rjmp	.-160    	; 0xe92 <__addsf3+0x28>
     f32:	93 95       	inc	r25
     f34:	88 0f       	add	r24, r24
     f36:	08 f0       	brcs	.+2      	; 0xf3a <__addsf3x+0xa2>
     f38:	99 27       	eor	r25, r25
     f3a:	ee 0f       	add	r30, r30
     f3c:	97 95       	ror	r25
     f3e:	87 95       	ror	r24
     f40:	08 95       	ret

00000f42 <__divsf3>:
     f42:	0e 94 b5 07 	call	0xf6a	; 0xf6a <__divsf3x>
     f46:	0c 94 ba 08 	jmp	0x1174	; 0x1174 <__fp_round>
     f4a:	0e 94 b3 08 	call	0x1166	; 0x1166 <__fp_pscB>
     f4e:	58 f0       	brcs	.+22     	; 0xf66 <__divsf3+0x24>
     f50:	0e 94 ac 08 	call	0x1158	; 0x1158 <__fp_pscA>
     f54:	40 f0       	brcs	.+16     	; 0xf66 <__divsf3+0x24>
     f56:	29 f4       	brne	.+10     	; 0xf62 <__divsf3+0x20>
     f58:	5f 3f       	cpi	r21, 0xFF	; 255
     f5a:	29 f0       	breq	.+10     	; 0xf66 <__divsf3+0x24>
     f5c:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <__fp_inf>
     f60:	51 11       	cpse	r21, r1
     f62:	0c 94 ee 08 	jmp	0x11dc	; 0x11dc <__fp_szero>
     f66:	0c 94 a9 08 	jmp	0x1152	; 0x1152 <__fp_nan>

00000f6a <__divsf3x>:
     f6a:	0e 94 cb 08 	call	0x1196	; 0x1196 <__fp_split3>
     f6e:	68 f3       	brcs	.-38     	; 0xf4a <__divsf3+0x8>

00000f70 <__divsf3_pse>:
     f70:	99 23       	and	r25, r25
     f72:	b1 f3       	breq	.-20     	; 0xf60 <__divsf3+0x1e>
     f74:	55 23       	and	r21, r21
     f76:	91 f3       	breq	.-28     	; 0xf5c <__divsf3+0x1a>
     f78:	95 1b       	sub	r25, r21
     f7a:	55 0b       	sbc	r21, r21
     f7c:	bb 27       	eor	r27, r27
     f7e:	aa 27       	eor	r26, r26
     f80:	62 17       	cp	r22, r18
     f82:	73 07       	cpc	r23, r19
     f84:	84 07       	cpc	r24, r20
     f86:	38 f0       	brcs	.+14     	; 0xf96 <__divsf3_pse+0x26>
     f88:	9f 5f       	subi	r25, 0xFF	; 255
     f8a:	5f 4f       	sbci	r21, 0xFF	; 255
     f8c:	22 0f       	add	r18, r18
     f8e:	33 1f       	adc	r19, r19
     f90:	44 1f       	adc	r20, r20
     f92:	aa 1f       	adc	r26, r26
     f94:	a9 f3       	breq	.-22     	; 0xf80 <__divsf3_pse+0x10>
     f96:	35 d0       	rcall	.+106    	; 0x1002 <__divsf3_pse+0x92>
     f98:	0e 2e       	mov	r0, r30
     f9a:	3a f0       	brmi	.+14     	; 0xfaa <__divsf3_pse+0x3a>
     f9c:	e0 e8       	ldi	r30, 0x80	; 128
     f9e:	32 d0       	rcall	.+100    	; 0x1004 <__divsf3_pse+0x94>
     fa0:	91 50       	subi	r25, 0x01	; 1
     fa2:	50 40       	sbci	r21, 0x00	; 0
     fa4:	e6 95       	lsr	r30
     fa6:	00 1c       	adc	r0, r0
     fa8:	ca f7       	brpl	.-14     	; 0xf9c <__divsf3_pse+0x2c>
     faa:	2b d0       	rcall	.+86     	; 0x1002 <__divsf3_pse+0x92>
     fac:	fe 2f       	mov	r31, r30
     fae:	29 d0       	rcall	.+82     	; 0x1002 <__divsf3_pse+0x92>
     fb0:	66 0f       	add	r22, r22
     fb2:	77 1f       	adc	r23, r23
     fb4:	88 1f       	adc	r24, r24
     fb6:	bb 1f       	adc	r27, r27
     fb8:	26 17       	cp	r18, r22
     fba:	37 07       	cpc	r19, r23
     fbc:	48 07       	cpc	r20, r24
     fbe:	ab 07       	cpc	r26, r27
     fc0:	b0 e8       	ldi	r27, 0x80	; 128
     fc2:	09 f0       	breq	.+2      	; 0xfc6 <__divsf3_pse+0x56>
     fc4:	bb 0b       	sbc	r27, r27
     fc6:	80 2d       	mov	r24, r0
     fc8:	bf 01       	movw	r22, r30
     fca:	ff 27       	eor	r31, r31
     fcc:	93 58       	subi	r25, 0x83	; 131
     fce:	5f 4f       	sbci	r21, 0xFF	; 255
     fd0:	3a f0       	brmi	.+14     	; 0xfe0 <__divsf3_pse+0x70>
     fd2:	9e 3f       	cpi	r25, 0xFE	; 254
     fd4:	51 05       	cpc	r21, r1
     fd6:	78 f0       	brcs	.+30     	; 0xff6 <__divsf3_pse+0x86>
     fd8:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <__fp_inf>
     fdc:	0c 94 ee 08 	jmp	0x11dc	; 0x11dc <__fp_szero>
     fe0:	5f 3f       	cpi	r21, 0xFF	; 255
     fe2:	e4 f3       	brlt	.-8      	; 0xfdc <__divsf3_pse+0x6c>
     fe4:	98 3e       	cpi	r25, 0xE8	; 232
     fe6:	d4 f3       	brlt	.-12     	; 0xfdc <__divsf3_pse+0x6c>
     fe8:	86 95       	lsr	r24
     fea:	77 95       	ror	r23
     fec:	67 95       	ror	r22
     fee:	b7 95       	ror	r27
     ff0:	f7 95       	ror	r31
     ff2:	9f 5f       	subi	r25, 0xFF	; 255
     ff4:	c9 f7       	brne	.-14     	; 0xfe8 <__divsf3_pse+0x78>
     ff6:	88 0f       	add	r24, r24
     ff8:	91 1d       	adc	r25, r1
     ffa:	96 95       	lsr	r25
     ffc:	87 95       	ror	r24
     ffe:	97 f9       	bld	r25, 7
    1000:	08 95       	ret
    1002:	e1 e0       	ldi	r30, 0x01	; 1
    1004:	66 0f       	add	r22, r22
    1006:	77 1f       	adc	r23, r23
    1008:	88 1f       	adc	r24, r24
    100a:	bb 1f       	adc	r27, r27
    100c:	62 17       	cp	r22, r18
    100e:	73 07       	cpc	r23, r19
    1010:	84 07       	cpc	r24, r20
    1012:	ba 07       	cpc	r27, r26
    1014:	20 f0       	brcs	.+8      	; 0x101e <__divsf3_pse+0xae>
    1016:	62 1b       	sub	r22, r18
    1018:	73 0b       	sbc	r23, r19
    101a:	84 0b       	sbc	r24, r20
    101c:	ba 0b       	sbc	r27, r26
    101e:	ee 1f       	adc	r30, r30
    1020:	88 f7       	brcc	.-30     	; 0x1004 <__divsf3_pse+0x94>
    1022:	e0 95       	com	r30
    1024:	08 95       	ret

00001026 <__fixunssfsi>:
    1026:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <__fp_splitA>
    102a:	88 f0       	brcs	.+34     	; 0x104e <__fixunssfsi+0x28>
    102c:	9f 57       	subi	r25, 0x7F	; 127
    102e:	98 f0       	brcs	.+38     	; 0x1056 <__fixunssfsi+0x30>
    1030:	b9 2f       	mov	r27, r25
    1032:	99 27       	eor	r25, r25
    1034:	b7 51       	subi	r27, 0x17	; 23
    1036:	b0 f0       	brcs	.+44     	; 0x1064 <__fixunssfsi+0x3e>
    1038:	e1 f0       	breq	.+56     	; 0x1072 <__fixunssfsi+0x4c>
    103a:	66 0f       	add	r22, r22
    103c:	77 1f       	adc	r23, r23
    103e:	88 1f       	adc	r24, r24
    1040:	99 1f       	adc	r25, r25
    1042:	1a f0       	brmi	.+6      	; 0x104a <__fixunssfsi+0x24>
    1044:	ba 95       	dec	r27
    1046:	c9 f7       	brne	.-14     	; 0x103a <__fixunssfsi+0x14>
    1048:	14 c0       	rjmp	.+40     	; 0x1072 <__fixunssfsi+0x4c>
    104a:	b1 30       	cpi	r27, 0x01	; 1
    104c:	91 f0       	breq	.+36     	; 0x1072 <__fixunssfsi+0x4c>
    104e:	0e 94 ed 08 	call	0x11da	; 0x11da <__fp_zero>
    1052:	b1 e0       	ldi	r27, 0x01	; 1
    1054:	08 95       	ret
    1056:	0c 94 ed 08 	jmp	0x11da	; 0x11da <__fp_zero>
    105a:	67 2f       	mov	r22, r23
    105c:	78 2f       	mov	r23, r24
    105e:	88 27       	eor	r24, r24
    1060:	b8 5f       	subi	r27, 0xF8	; 248
    1062:	39 f0       	breq	.+14     	; 0x1072 <__fixunssfsi+0x4c>
    1064:	b9 3f       	cpi	r27, 0xF9	; 249
    1066:	cc f3       	brlt	.-14     	; 0x105a <__fixunssfsi+0x34>
    1068:	86 95       	lsr	r24
    106a:	77 95       	ror	r23
    106c:	67 95       	ror	r22
    106e:	b3 95       	inc	r27
    1070:	d9 f7       	brne	.-10     	; 0x1068 <__fixunssfsi+0x42>
    1072:	3e f4       	brtc	.+14     	; 0x1082 <__fixunssfsi+0x5c>
    1074:	90 95       	com	r25
    1076:	80 95       	com	r24
    1078:	70 95       	com	r23
    107a:	61 95       	neg	r22
    107c:	7f 4f       	sbci	r23, 0xFF	; 255
    107e:	8f 4f       	sbci	r24, 0xFF	; 255
    1080:	9f 4f       	sbci	r25, 0xFF	; 255
    1082:	08 95       	ret

00001084 <__floatunsisf>:
    1084:	e8 94       	clt
    1086:	09 c0       	rjmp	.+18     	; 0x109a <__floatsisf+0x12>

00001088 <__floatsisf>:
    1088:	97 fb       	bst	r25, 7
    108a:	3e f4       	brtc	.+14     	; 0x109a <__floatsisf+0x12>
    108c:	90 95       	com	r25
    108e:	80 95       	com	r24
    1090:	70 95       	com	r23
    1092:	61 95       	neg	r22
    1094:	7f 4f       	sbci	r23, 0xFF	; 255
    1096:	8f 4f       	sbci	r24, 0xFF	; 255
    1098:	9f 4f       	sbci	r25, 0xFF	; 255
    109a:	99 23       	and	r25, r25
    109c:	a9 f0       	breq	.+42     	; 0x10c8 <__floatsisf+0x40>
    109e:	f9 2f       	mov	r31, r25
    10a0:	96 e9       	ldi	r25, 0x96	; 150
    10a2:	bb 27       	eor	r27, r27
    10a4:	93 95       	inc	r25
    10a6:	f6 95       	lsr	r31
    10a8:	87 95       	ror	r24
    10aa:	77 95       	ror	r23
    10ac:	67 95       	ror	r22
    10ae:	b7 95       	ror	r27
    10b0:	f1 11       	cpse	r31, r1
    10b2:	f8 cf       	rjmp	.-16     	; 0x10a4 <__floatsisf+0x1c>
    10b4:	fa f4       	brpl	.+62     	; 0x10f4 <__floatsisf+0x6c>
    10b6:	bb 0f       	add	r27, r27
    10b8:	11 f4       	brne	.+4      	; 0x10be <__floatsisf+0x36>
    10ba:	60 ff       	sbrs	r22, 0
    10bc:	1b c0       	rjmp	.+54     	; 0x10f4 <__floatsisf+0x6c>
    10be:	6f 5f       	subi	r22, 0xFF	; 255
    10c0:	7f 4f       	sbci	r23, 0xFF	; 255
    10c2:	8f 4f       	sbci	r24, 0xFF	; 255
    10c4:	9f 4f       	sbci	r25, 0xFF	; 255
    10c6:	16 c0       	rjmp	.+44     	; 0x10f4 <__floatsisf+0x6c>
    10c8:	88 23       	and	r24, r24
    10ca:	11 f0       	breq	.+4      	; 0x10d0 <__floatsisf+0x48>
    10cc:	96 e9       	ldi	r25, 0x96	; 150
    10ce:	11 c0       	rjmp	.+34     	; 0x10f2 <__floatsisf+0x6a>
    10d0:	77 23       	and	r23, r23
    10d2:	21 f0       	breq	.+8      	; 0x10dc <__floatsisf+0x54>
    10d4:	9e e8       	ldi	r25, 0x8E	; 142
    10d6:	87 2f       	mov	r24, r23
    10d8:	76 2f       	mov	r23, r22
    10da:	05 c0       	rjmp	.+10     	; 0x10e6 <__floatsisf+0x5e>
    10dc:	66 23       	and	r22, r22
    10de:	71 f0       	breq	.+28     	; 0x10fc <__floatsisf+0x74>
    10e0:	96 e8       	ldi	r25, 0x86	; 134
    10e2:	86 2f       	mov	r24, r22
    10e4:	70 e0       	ldi	r23, 0x00	; 0
    10e6:	60 e0       	ldi	r22, 0x00	; 0
    10e8:	2a f0       	brmi	.+10     	; 0x10f4 <__floatsisf+0x6c>
    10ea:	9a 95       	dec	r25
    10ec:	66 0f       	add	r22, r22
    10ee:	77 1f       	adc	r23, r23
    10f0:	88 1f       	adc	r24, r24
    10f2:	da f7       	brpl	.-10     	; 0x10ea <__floatsisf+0x62>
    10f4:	88 0f       	add	r24, r24
    10f6:	96 95       	lsr	r25
    10f8:	87 95       	ror	r24
    10fa:	97 f9       	bld	r25, 7
    10fc:	08 95       	ret

000010fe <__fp_cmp>:
    10fe:	99 0f       	add	r25, r25
    1100:	00 08       	sbc	r0, r0
    1102:	55 0f       	add	r21, r21
    1104:	aa 0b       	sbc	r26, r26
    1106:	e0 e8       	ldi	r30, 0x80	; 128
    1108:	fe ef       	ldi	r31, 0xFE	; 254
    110a:	16 16       	cp	r1, r22
    110c:	17 06       	cpc	r1, r23
    110e:	e8 07       	cpc	r30, r24
    1110:	f9 07       	cpc	r31, r25
    1112:	c0 f0       	brcs	.+48     	; 0x1144 <__fp_cmp+0x46>
    1114:	12 16       	cp	r1, r18
    1116:	13 06       	cpc	r1, r19
    1118:	e4 07       	cpc	r30, r20
    111a:	f5 07       	cpc	r31, r21
    111c:	98 f0       	brcs	.+38     	; 0x1144 <__fp_cmp+0x46>
    111e:	62 1b       	sub	r22, r18
    1120:	73 0b       	sbc	r23, r19
    1122:	84 0b       	sbc	r24, r20
    1124:	95 0b       	sbc	r25, r21
    1126:	39 f4       	brne	.+14     	; 0x1136 <__fp_cmp+0x38>
    1128:	0a 26       	eor	r0, r26
    112a:	61 f0       	breq	.+24     	; 0x1144 <__fp_cmp+0x46>
    112c:	23 2b       	or	r18, r19
    112e:	24 2b       	or	r18, r20
    1130:	25 2b       	or	r18, r21
    1132:	21 f4       	brne	.+8      	; 0x113c <__fp_cmp+0x3e>
    1134:	08 95       	ret
    1136:	0a 26       	eor	r0, r26
    1138:	09 f4       	brne	.+2      	; 0x113c <__fp_cmp+0x3e>
    113a:	a1 40       	sbci	r26, 0x01	; 1
    113c:	a6 95       	lsr	r26
    113e:	8f ef       	ldi	r24, 0xFF	; 255
    1140:	81 1d       	adc	r24, r1
    1142:	81 1d       	adc	r24, r1
    1144:	08 95       	ret

00001146 <__fp_inf>:
    1146:	97 f9       	bld	r25, 7
    1148:	9f 67       	ori	r25, 0x7F	; 127
    114a:	80 e8       	ldi	r24, 0x80	; 128
    114c:	70 e0       	ldi	r23, 0x00	; 0
    114e:	60 e0       	ldi	r22, 0x00	; 0
    1150:	08 95       	ret

00001152 <__fp_nan>:
    1152:	9f ef       	ldi	r25, 0xFF	; 255
    1154:	80 ec       	ldi	r24, 0xC0	; 192
    1156:	08 95       	ret

00001158 <__fp_pscA>:
    1158:	00 24       	eor	r0, r0
    115a:	0a 94       	dec	r0
    115c:	16 16       	cp	r1, r22
    115e:	17 06       	cpc	r1, r23
    1160:	18 06       	cpc	r1, r24
    1162:	09 06       	cpc	r0, r25
    1164:	08 95       	ret

00001166 <__fp_pscB>:
    1166:	00 24       	eor	r0, r0
    1168:	0a 94       	dec	r0
    116a:	12 16       	cp	r1, r18
    116c:	13 06       	cpc	r1, r19
    116e:	14 06       	cpc	r1, r20
    1170:	05 06       	cpc	r0, r21
    1172:	08 95       	ret

00001174 <__fp_round>:
    1174:	09 2e       	mov	r0, r25
    1176:	03 94       	inc	r0
    1178:	00 0c       	add	r0, r0
    117a:	11 f4       	brne	.+4      	; 0x1180 <__fp_round+0xc>
    117c:	88 23       	and	r24, r24
    117e:	52 f0       	brmi	.+20     	; 0x1194 <__fp_round+0x20>
    1180:	bb 0f       	add	r27, r27
    1182:	40 f4       	brcc	.+16     	; 0x1194 <__fp_round+0x20>
    1184:	bf 2b       	or	r27, r31
    1186:	11 f4       	brne	.+4      	; 0x118c <__fp_round+0x18>
    1188:	60 ff       	sbrs	r22, 0
    118a:	04 c0       	rjmp	.+8      	; 0x1194 <__fp_round+0x20>
    118c:	6f 5f       	subi	r22, 0xFF	; 255
    118e:	7f 4f       	sbci	r23, 0xFF	; 255
    1190:	8f 4f       	sbci	r24, 0xFF	; 255
    1192:	9f 4f       	sbci	r25, 0xFF	; 255
    1194:	08 95       	ret

00001196 <__fp_split3>:
    1196:	57 fd       	sbrc	r21, 7
    1198:	90 58       	subi	r25, 0x80	; 128
    119a:	44 0f       	add	r20, r20
    119c:	55 1f       	adc	r21, r21
    119e:	59 f0       	breq	.+22     	; 0x11b6 <__fp_splitA+0x10>
    11a0:	5f 3f       	cpi	r21, 0xFF	; 255
    11a2:	71 f0       	breq	.+28     	; 0x11c0 <__fp_splitA+0x1a>
    11a4:	47 95       	ror	r20

000011a6 <__fp_splitA>:
    11a6:	88 0f       	add	r24, r24
    11a8:	97 fb       	bst	r25, 7
    11aa:	99 1f       	adc	r25, r25
    11ac:	61 f0       	breq	.+24     	; 0x11c6 <__fp_splitA+0x20>
    11ae:	9f 3f       	cpi	r25, 0xFF	; 255
    11b0:	79 f0       	breq	.+30     	; 0x11d0 <__fp_splitA+0x2a>
    11b2:	87 95       	ror	r24
    11b4:	08 95       	ret
    11b6:	12 16       	cp	r1, r18
    11b8:	13 06       	cpc	r1, r19
    11ba:	14 06       	cpc	r1, r20
    11bc:	55 1f       	adc	r21, r21
    11be:	f2 cf       	rjmp	.-28     	; 0x11a4 <__fp_split3+0xe>
    11c0:	46 95       	lsr	r20
    11c2:	f1 df       	rcall	.-30     	; 0x11a6 <__fp_splitA>
    11c4:	08 c0       	rjmp	.+16     	; 0x11d6 <__fp_splitA+0x30>
    11c6:	16 16       	cp	r1, r22
    11c8:	17 06       	cpc	r1, r23
    11ca:	18 06       	cpc	r1, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	f1 cf       	rjmp	.-30     	; 0x11b2 <__fp_splitA+0xc>
    11d0:	86 95       	lsr	r24
    11d2:	71 05       	cpc	r23, r1
    11d4:	61 05       	cpc	r22, r1
    11d6:	08 94       	sec
    11d8:	08 95       	ret

000011da <__fp_zero>:
    11da:	e8 94       	clt

000011dc <__fp_szero>:
    11dc:	bb 27       	eor	r27, r27
    11de:	66 27       	eor	r22, r22
    11e0:	77 27       	eor	r23, r23
    11e2:	cb 01       	movw	r24, r22
    11e4:	97 f9       	bld	r25, 7
    11e6:	08 95       	ret

000011e8 <__gesf2>:
    11e8:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__fp_cmp>
    11ec:	08 f4       	brcc	.+2      	; 0x11f0 <__gesf2+0x8>
    11ee:	8f ef       	ldi	r24, 0xFF	; 255
    11f0:	08 95       	ret

000011f2 <__mulsf3>:
    11f2:	0e 94 0c 09 	call	0x1218	; 0x1218 <__mulsf3x>
    11f6:	0c 94 ba 08 	jmp	0x1174	; 0x1174 <__fp_round>
    11fa:	0e 94 ac 08 	call	0x1158	; 0x1158 <__fp_pscA>
    11fe:	38 f0       	brcs	.+14     	; 0x120e <__mulsf3+0x1c>
    1200:	0e 94 b3 08 	call	0x1166	; 0x1166 <__fp_pscB>
    1204:	20 f0       	brcs	.+8      	; 0x120e <__mulsf3+0x1c>
    1206:	95 23       	and	r25, r21
    1208:	11 f0       	breq	.+4      	; 0x120e <__mulsf3+0x1c>
    120a:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <__fp_inf>
    120e:	0c 94 a9 08 	jmp	0x1152	; 0x1152 <__fp_nan>
    1212:	11 24       	eor	r1, r1
    1214:	0c 94 ee 08 	jmp	0x11dc	; 0x11dc <__fp_szero>

00001218 <__mulsf3x>:
    1218:	0e 94 cb 08 	call	0x1196	; 0x1196 <__fp_split3>
    121c:	70 f3       	brcs	.-36     	; 0x11fa <__mulsf3+0x8>

0000121e <__mulsf3_pse>:
    121e:	95 9f       	mul	r25, r21
    1220:	c1 f3       	breq	.-16     	; 0x1212 <__mulsf3+0x20>
    1222:	95 0f       	add	r25, r21
    1224:	50 e0       	ldi	r21, 0x00	; 0
    1226:	55 1f       	adc	r21, r21
    1228:	62 9f       	mul	r22, r18
    122a:	f0 01       	movw	r30, r0
    122c:	72 9f       	mul	r23, r18
    122e:	bb 27       	eor	r27, r27
    1230:	f0 0d       	add	r31, r0
    1232:	b1 1d       	adc	r27, r1
    1234:	63 9f       	mul	r22, r19
    1236:	aa 27       	eor	r26, r26
    1238:	f0 0d       	add	r31, r0
    123a:	b1 1d       	adc	r27, r1
    123c:	aa 1f       	adc	r26, r26
    123e:	64 9f       	mul	r22, r20
    1240:	66 27       	eor	r22, r22
    1242:	b0 0d       	add	r27, r0
    1244:	a1 1d       	adc	r26, r1
    1246:	66 1f       	adc	r22, r22
    1248:	82 9f       	mul	r24, r18
    124a:	22 27       	eor	r18, r18
    124c:	b0 0d       	add	r27, r0
    124e:	a1 1d       	adc	r26, r1
    1250:	62 1f       	adc	r22, r18
    1252:	73 9f       	mul	r23, r19
    1254:	b0 0d       	add	r27, r0
    1256:	a1 1d       	adc	r26, r1
    1258:	62 1f       	adc	r22, r18
    125a:	83 9f       	mul	r24, r19
    125c:	a0 0d       	add	r26, r0
    125e:	61 1d       	adc	r22, r1
    1260:	22 1f       	adc	r18, r18
    1262:	74 9f       	mul	r23, r20
    1264:	33 27       	eor	r19, r19
    1266:	a0 0d       	add	r26, r0
    1268:	61 1d       	adc	r22, r1
    126a:	23 1f       	adc	r18, r19
    126c:	84 9f       	mul	r24, r20
    126e:	60 0d       	add	r22, r0
    1270:	21 1d       	adc	r18, r1
    1272:	82 2f       	mov	r24, r18
    1274:	76 2f       	mov	r23, r22
    1276:	6a 2f       	mov	r22, r26
    1278:	11 24       	eor	r1, r1
    127a:	9f 57       	subi	r25, 0x7F	; 127
    127c:	50 40       	sbci	r21, 0x00	; 0
    127e:	9a f0       	brmi	.+38     	; 0x12a6 <__mulsf3_pse+0x88>
    1280:	f1 f0       	breq	.+60     	; 0x12be <__mulsf3_pse+0xa0>
    1282:	88 23       	and	r24, r24
    1284:	4a f0       	brmi	.+18     	; 0x1298 <__mulsf3_pse+0x7a>
    1286:	ee 0f       	add	r30, r30
    1288:	ff 1f       	adc	r31, r31
    128a:	bb 1f       	adc	r27, r27
    128c:	66 1f       	adc	r22, r22
    128e:	77 1f       	adc	r23, r23
    1290:	88 1f       	adc	r24, r24
    1292:	91 50       	subi	r25, 0x01	; 1
    1294:	50 40       	sbci	r21, 0x00	; 0
    1296:	a9 f7       	brne	.-22     	; 0x1282 <__mulsf3_pse+0x64>
    1298:	9e 3f       	cpi	r25, 0xFE	; 254
    129a:	51 05       	cpc	r21, r1
    129c:	80 f0       	brcs	.+32     	; 0x12be <__mulsf3_pse+0xa0>
    129e:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <__fp_inf>
    12a2:	0c 94 ee 08 	jmp	0x11dc	; 0x11dc <__fp_szero>
    12a6:	5f 3f       	cpi	r21, 0xFF	; 255
    12a8:	e4 f3       	brlt	.-8      	; 0x12a2 <__mulsf3_pse+0x84>
    12aa:	98 3e       	cpi	r25, 0xE8	; 232
    12ac:	d4 f3       	brlt	.-12     	; 0x12a2 <__mulsf3_pse+0x84>
    12ae:	86 95       	lsr	r24
    12b0:	77 95       	ror	r23
    12b2:	67 95       	ror	r22
    12b4:	b7 95       	ror	r27
    12b6:	f7 95       	ror	r31
    12b8:	e7 95       	ror	r30
    12ba:	9f 5f       	subi	r25, 0xFF	; 255
    12bc:	c1 f7       	brne	.-16     	; 0x12ae <__mulsf3_pse+0x90>
    12be:	fe 2b       	or	r31, r30
    12c0:	88 0f       	add	r24, r24
    12c2:	91 1d       	adc	r25, r1
    12c4:	96 95       	lsr	r25
    12c6:	87 95       	ror	r24
    12c8:	97 f9       	bld	r25, 7
    12ca:	08 95       	ret

000012cc <pow>:
    12cc:	fa 01       	movw	r30, r20
    12ce:	ee 0f       	add	r30, r30
    12d0:	ff 1f       	adc	r31, r31
    12d2:	30 96       	adiw	r30, 0x00	; 0
    12d4:	21 05       	cpc	r18, r1
    12d6:	31 05       	cpc	r19, r1
    12d8:	a1 f1       	breq	.+104    	; 0x1342 <pow+0x76>
    12da:	61 15       	cp	r22, r1
    12dc:	71 05       	cpc	r23, r1
    12de:	61 f4       	brne	.+24     	; 0x12f8 <pow+0x2c>
    12e0:	80 38       	cpi	r24, 0x80	; 128
    12e2:	bf e3       	ldi	r27, 0x3F	; 63
    12e4:	9b 07       	cpc	r25, r27
    12e6:	49 f1       	breq	.+82     	; 0x133a <pow+0x6e>
    12e8:	68 94       	set
    12ea:	90 38       	cpi	r25, 0x80	; 128
    12ec:	81 05       	cpc	r24, r1
    12ee:	61 f0       	breq	.+24     	; 0x1308 <pow+0x3c>
    12f0:	80 38       	cpi	r24, 0x80	; 128
    12f2:	bf ef       	ldi	r27, 0xFF	; 255
    12f4:	9b 07       	cpc	r25, r27
    12f6:	41 f0       	breq	.+16     	; 0x1308 <pow+0x3c>
    12f8:	99 23       	and	r25, r25
    12fa:	4a f5       	brpl	.+82     	; 0x134e <pow+0x82>
    12fc:	ff 3f       	cpi	r31, 0xFF	; 255
    12fe:	e1 05       	cpc	r30, r1
    1300:	31 05       	cpc	r19, r1
    1302:	21 05       	cpc	r18, r1
    1304:	19 f1       	breq	.+70     	; 0x134c <pow+0x80>
    1306:	e8 94       	clt
    1308:	08 94       	sec
    130a:	e7 95       	ror	r30
    130c:	d9 01       	movw	r26, r18
    130e:	aa 23       	and	r26, r26
    1310:	29 f4       	brne	.+10     	; 0x131c <pow+0x50>
    1312:	ab 2f       	mov	r26, r27
    1314:	be 2f       	mov	r27, r30
    1316:	f8 5f       	subi	r31, 0xF8	; 248
    1318:	d0 f3       	brcs	.-12     	; 0x130e <pow+0x42>
    131a:	10 c0       	rjmp	.+32     	; 0x133c <pow+0x70>
    131c:	ff 5f       	subi	r31, 0xFF	; 255
    131e:	70 f4       	brcc	.+28     	; 0x133c <pow+0x70>
    1320:	a6 95       	lsr	r26
    1322:	e0 f7       	brcc	.-8      	; 0x131c <pow+0x50>
    1324:	f7 39       	cpi	r31, 0x97	; 151
    1326:	50 f0       	brcs	.+20     	; 0x133c <pow+0x70>
    1328:	19 f0       	breq	.+6      	; 0x1330 <pow+0x64>
    132a:	ff 3a       	cpi	r31, 0xAF	; 175
    132c:	38 f4       	brcc	.+14     	; 0x133c <pow+0x70>
    132e:	9f 77       	andi	r25, 0x7F	; 127
    1330:	9f 93       	push	r25
    1332:	0d d0       	rcall	.+26     	; 0x134e <pow+0x82>
    1334:	0f 90       	pop	r0
    1336:	07 fc       	sbrc	r0, 7
    1338:	90 58       	subi	r25, 0x80	; 128
    133a:	08 95       	ret
    133c:	46 f0       	brts	.+16     	; 0x134e <pow+0x82>
    133e:	0c 94 a9 08 	jmp	0x1152	; 0x1152 <__fp_nan>
    1342:	60 e0       	ldi	r22, 0x00	; 0
    1344:	70 e0       	ldi	r23, 0x00	; 0
    1346:	80 e8       	ldi	r24, 0x80	; 128
    1348:	9f e3       	ldi	r25, 0x3F	; 63
    134a:	08 95       	ret
    134c:	4f e7       	ldi	r20, 0x7F	; 127
    134e:	9f 77       	andi	r25, 0x7F	; 127
    1350:	5f 93       	push	r21
    1352:	4f 93       	push	r20
    1354:	3f 93       	push	r19
    1356:	2f 93       	push	r18
    1358:	0e 94 a8 0a 	call	0x1550	; 0x1550 <log>
    135c:	2f 91       	pop	r18
    135e:	3f 91       	pop	r19
    1360:	4f 91       	pop	r20
    1362:	5f 91       	pop	r21
    1364:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__mulsf3>
    1368:	0c 94 c6 09 	jmp	0x138c	; 0x138c <exp>

0000136c <sin>:
    136c:	9f 93       	push	r25
    136e:	0e 94 21 0a 	call	0x1442	; 0x1442 <__fp_rempio2>
    1372:	0f 90       	pop	r0
    1374:	07 fc       	sbrc	r0, 7
    1376:	ee 5f       	subi	r30, 0xFE	; 254
    1378:	0c 94 4a 0a 	jmp	0x1494	; 0x1494 <__fp_sinus>
    137c:	29 f4       	brne	.+10     	; 0x1388 <sin+0x1c>
    137e:	16 f0       	brts	.+4      	; 0x1384 <sin+0x18>
    1380:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <__fp_inf>
    1384:	0c 94 ed 08 	jmp	0x11da	; 0x11da <__fp_zero>
    1388:	0c 94 a9 08 	jmp	0x1152	; 0x1152 <__fp_nan>

0000138c <exp>:
    138c:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <__fp_splitA>
    1390:	a8 f3       	brcs	.-22     	; 0x137c <sin+0x10>
    1392:	96 38       	cpi	r25, 0x86	; 134
    1394:	a0 f7       	brcc	.-24     	; 0x137e <sin+0x12>
    1396:	07 f8       	bld	r0, 7
    1398:	0f 92       	push	r0
    139a:	e8 94       	clt
    139c:	2b e3       	ldi	r18, 0x3B	; 59
    139e:	3a ea       	ldi	r19, 0xAA	; 170
    13a0:	48 eb       	ldi	r20, 0xB8	; 184
    13a2:	5f e7       	ldi	r21, 0x7F	; 127
    13a4:	0e 94 0f 09 	call	0x121e	; 0x121e <__mulsf3_pse>
    13a8:	0f 92       	push	r0
    13aa:	0f 92       	push	r0
    13ac:	0f 92       	push	r0
    13ae:	4d b7       	in	r20, 0x3d	; 61
    13b0:	5e b7       	in	r21, 0x3e	; 62
    13b2:	0f 92       	push	r0
    13b4:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <modf>
    13b8:	e8 e6       	ldi	r30, 0x68	; 104
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__fp_powser>
    13c0:	4f 91       	pop	r20
    13c2:	5f 91       	pop	r21
    13c4:	ef 91       	pop	r30
    13c6:	ff 91       	pop	r31
    13c8:	e5 95       	asr	r30
    13ca:	ee 1f       	adc	r30, r30
    13cc:	ff 1f       	adc	r31, r31
    13ce:	49 f0       	breq	.+18     	; 0x13e2 <exp+0x56>
    13d0:	fe 57       	subi	r31, 0x7E	; 126
    13d2:	e0 68       	ori	r30, 0x80	; 128
    13d4:	44 27       	eor	r20, r20
    13d6:	ee 0f       	add	r30, r30
    13d8:	44 1f       	adc	r20, r20
    13da:	fa 95       	dec	r31
    13dc:	e1 f7       	brne	.-8      	; 0x13d6 <exp+0x4a>
    13de:	41 95       	neg	r20
    13e0:	55 0b       	sbc	r21, r21
    13e2:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <ldexp>
    13e6:	0f 90       	pop	r0
    13e8:	07 fe       	sbrs	r0, 7
    13ea:	0c 94 5e 0a 	jmp	0x14bc	; 0x14bc <inverse>
    13ee:	08 95       	ret

000013f0 <__fp_powser>:
    13f0:	df 93       	push	r29
    13f2:	cf 93       	push	r28
    13f4:	1f 93       	push	r17
    13f6:	0f 93       	push	r16
    13f8:	ff 92       	push	r15
    13fa:	ef 92       	push	r14
    13fc:	df 92       	push	r13
    13fe:	7b 01       	movw	r14, r22
    1400:	8c 01       	movw	r16, r24
    1402:	68 94       	set
    1404:	06 c0       	rjmp	.+12     	; 0x1412 <__fp_powser+0x22>
    1406:	da 2e       	mov	r13, r26
    1408:	ef 01       	movw	r28, r30
    140a:	0e 94 0c 09 	call	0x1218	; 0x1218 <__mulsf3x>
    140e:	fe 01       	movw	r30, r28
    1410:	e8 94       	clt
    1412:	a5 91       	lpm	r26, Z+
    1414:	25 91       	lpm	r18, Z+
    1416:	35 91       	lpm	r19, Z+
    1418:	45 91       	lpm	r20, Z+
    141a:	55 91       	lpm	r21, Z+
    141c:	a6 f3       	brts	.-24     	; 0x1406 <__fp_powser+0x16>
    141e:	ef 01       	movw	r28, r30
    1420:	0e 94 4c 07 	call	0xe98	; 0xe98 <__addsf3x>
    1424:	fe 01       	movw	r30, r28
    1426:	97 01       	movw	r18, r14
    1428:	a8 01       	movw	r20, r16
    142a:	da 94       	dec	r13
    142c:	69 f7       	brne	.-38     	; 0x1408 <__fp_powser+0x18>
    142e:	df 90       	pop	r13
    1430:	ef 90       	pop	r14
    1432:	ff 90       	pop	r15
    1434:	0f 91       	pop	r16
    1436:	1f 91       	pop	r17
    1438:	cf 91       	pop	r28
    143a:	df 91       	pop	r29
    143c:	08 95       	ret
    143e:	0c 94 a9 08 	jmp	0x1152	; 0x1152 <__fp_nan>

00001442 <__fp_rempio2>:
    1442:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <__fp_splitA>
    1446:	d8 f3       	brcs	.-10     	; 0x143e <__fp_powser+0x4e>
    1448:	e8 94       	clt
    144a:	e0 e0       	ldi	r30, 0x00	; 0
    144c:	bb 27       	eor	r27, r27
    144e:	9f 57       	subi	r25, 0x7F	; 127
    1450:	f0 f0       	brcs	.+60     	; 0x148e <__fp_rempio2+0x4c>
    1452:	2a ed       	ldi	r18, 0xDA	; 218
    1454:	3f e0       	ldi	r19, 0x0F	; 15
    1456:	49 ec       	ldi	r20, 0xC9	; 201
    1458:	06 c0       	rjmp	.+12     	; 0x1466 <__fp_rempio2+0x24>
    145a:	ee 0f       	add	r30, r30
    145c:	bb 0f       	add	r27, r27
    145e:	66 1f       	adc	r22, r22
    1460:	77 1f       	adc	r23, r23
    1462:	88 1f       	adc	r24, r24
    1464:	28 f0       	brcs	.+10     	; 0x1470 <__fp_rempio2+0x2e>
    1466:	b2 3a       	cpi	r27, 0xA2	; 162
    1468:	62 07       	cpc	r22, r18
    146a:	73 07       	cpc	r23, r19
    146c:	84 07       	cpc	r24, r20
    146e:	28 f0       	brcs	.+10     	; 0x147a <__fp_rempio2+0x38>
    1470:	b2 5a       	subi	r27, 0xA2	; 162
    1472:	62 0b       	sbc	r22, r18
    1474:	73 0b       	sbc	r23, r19
    1476:	84 0b       	sbc	r24, r20
    1478:	e3 95       	inc	r30
    147a:	9a 95       	dec	r25
    147c:	72 f7       	brpl	.-36     	; 0x145a <__fp_rempio2+0x18>
    147e:	80 38       	cpi	r24, 0x80	; 128
    1480:	30 f4       	brcc	.+12     	; 0x148e <__fp_rempio2+0x4c>
    1482:	9a 95       	dec	r25
    1484:	bb 0f       	add	r27, r27
    1486:	66 1f       	adc	r22, r22
    1488:	77 1f       	adc	r23, r23
    148a:	88 1f       	adc	r24, r24
    148c:	d2 f7       	brpl	.-12     	; 0x1482 <__fp_rempio2+0x40>
    148e:	90 48       	sbci	r25, 0x80	; 128
    1490:	0c 94 26 0b 	jmp	0x164c	; 0x164c <__fp_mpack_finite>

00001494 <__fp_sinus>:
    1494:	ef 93       	push	r30
    1496:	e0 ff       	sbrs	r30, 0
    1498:	07 c0       	rjmp	.+14     	; 0x14a8 <__fp_sinus+0x14>
    149a:	a2 ea       	ldi	r26, 0xA2	; 162
    149c:	2a ed       	ldi	r18, 0xDA	; 218
    149e:	3f e0       	ldi	r19, 0x0F	; 15
    14a0:	49 ec       	ldi	r20, 0xC9	; 201
    14a2:	5f eb       	ldi	r21, 0xBF	; 191
    14a4:	0e 94 4c 07 	call	0xe98	; 0xe98 <__addsf3x>
    14a8:	0e 94 ba 08 	call	0x1174	; 0x1174 <__fp_round>
    14ac:	0f 90       	pop	r0
    14ae:	03 94       	inc	r0
    14b0:	01 fc       	sbrc	r0, 1
    14b2:	90 58       	subi	r25, 0x80	; 128
    14b4:	e0 e9       	ldi	r30, 0x90	; 144
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	0c 94 32 0b 	jmp	0x1664	; 0x1664 <__fp_powsodd>

000014bc <inverse>:
    14bc:	9b 01       	movw	r18, r22
    14be:	ac 01       	movw	r20, r24
    14c0:	60 e0       	ldi	r22, 0x00	; 0
    14c2:	70 e0       	ldi	r23, 0x00	; 0
    14c4:	80 e8       	ldi	r24, 0x80	; 128
    14c6:	9f e3       	ldi	r25, 0x3F	; 63
    14c8:	0c 94 a1 07 	jmp	0xf42	; 0xf42 <__divsf3>
    14cc:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <__fp_inf>
    14d0:	0c 94 24 0b 	jmp	0x1648	; 0x1648 <__fp_mpack>

000014d4 <ldexp>:
    14d4:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <__fp_splitA>
    14d8:	d8 f3       	brcs	.-10     	; 0x14d0 <inverse+0x14>
    14da:	99 23       	and	r25, r25
    14dc:	c9 f3       	breq	.-14     	; 0x14d0 <inverse+0x14>
    14de:	94 0f       	add	r25, r20
    14e0:	51 1d       	adc	r21, r1
    14e2:	a3 f3       	brvs	.-24     	; 0x14cc <inverse+0x10>
    14e4:	91 50       	subi	r25, 0x01	; 1
    14e6:	50 40       	sbci	r21, 0x00	; 0
    14e8:	94 f0       	brlt	.+36     	; 0x150e <ldexp+0x3a>
    14ea:	59 f0       	breq	.+22     	; 0x1502 <ldexp+0x2e>
    14ec:	88 23       	and	r24, r24
    14ee:	32 f0       	brmi	.+12     	; 0x14fc <ldexp+0x28>
    14f0:	66 0f       	add	r22, r22
    14f2:	77 1f       	adc	r23, r23
    14f4:	88 1f       	adc	r24, r24
    14f6:	91 50       	subi	r25, 0x01	; 1
    14f8:	50 40       	sbci	r21, 0x00	; 0
    14fa:	c1 f7       	brne	.-16     	; 0x14ec <ldexp+0x18>
    14fc:	9e 3f       	cpi	r25, 0xFE	; 254
    14fe:	51 05       	cpc	r21, r1
    1500:	2c f7       	brge	.-54     	; 0x14cc <inverse+0x10>
    1502:	88 0f       	add	r24, r24
    1504:	91 1d       	adc	r25, r1
    1506:	96 95       	lsr	r25
    1508:	87 95       	ror	r24
    150a:	97 f9       	bld	r25, 7
    150c:	08 95       	ret
    150e:	5f 3f       	cpi	r21, 0xFF	; 255
    1510:	ac f0       	brlt	.+42     	; 0x153c <ldexp+0x68>
    1512:	98 3e       	cpi	r25, 0xE8	; 232
    1514:	9c f0       	brlt	.+38     	; 0x153c <ldexp+0x68>
    1516:	bb 27       	eor	r27, r27
    1518:	86 95       	lsr	r24
    151a:	77 95       	ror	r23
    151c:	67 95       	ror	r22
    151e:	b7 95       	ror	r27
    1520:	08 f4       	brcc	.+2      	; 0x1524 <ldexp+0x50>
    1522:	b1 60       	ori	r27, 0x01	; 1
    1524:	93 95       	inc	r25
    1526:	c1 f7       	brne	.-16     	; 0x1518 <ldexp+0x44>
    1528:	bb 0f       	add	r27, r27
    152a:	58 f7       	brcc	.-42     	; 0x1502 <ldexp+0x2e>
    152c:	11 f4       	brne	.+4      	; 0x1532 <ldexp+0x5e>
    152e:	60 ff       	sbrs	r22, 0
    1530:	e8 cf       	rjmp	.-48     	; 0x1502 <ldexp+0x2e>
    1532:	6f 5f       	subi	r22, 0xFF	; 255
    1534:	7f 4f       	sbci	r23, 0xFF	; 255
    1536:	8f 4f       	sbci	r24, 0xFF	; 255
    1538:	9f 4f       	sbci	r25, 0xFF	; 255
    153a:	e3 cf       	rjmp	.-58     	; 0x1502 <ldexp+0x2e>
    153c:	0c 94 ee 08 	jmp	0x11dc	; 0x11dc <__fp_szero>
    1540:	16 f0       	brts	.+4      	; 0x1546 <ldexp+0x72>
    1542:	0c 94 24 0b 	jmp	0x1648	; 0x1648 <__fp_mpack>
    1546:	0c 94 a9 08 	jmp	0x1152	; 0x1152 <__fp_nan>
    154a:	68 94       	set
    154c:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <__fp_inf>

00001550 <log>:
    1550:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <__fp_splitA>
    1554:	a8 f3       	brcs	.-22     	; 0x1540 <ldexp+0x6c>
    1556:	99 23       	and	r25, r25
    1558:	c1 f3       	breq	.-16     	; 0x154a <ldexp+0x76>
    155a:	ae f3       	brts	.-22     	; 0x1546 <ldexp+0x72>
    155c:	df 93       	push	r29
    155e:	cf 93       	push	r28
    1560:	1f 93       	push	r17
    1562:	0f 93       	push	r16
    1564:	ff 92       	push	r15
    1566:	c9 2f       	mov	r28, r25
    1568:	dd 27       	eor	r29, r29
    156a:	88 23       	and	r24, r24
    156c:	2a f0       	brmi	.+10     	; 0x1578 <log+0x28>
    156e:	21 97       	sbiw	r28, 0x01	; 1
    1570:	66 0f       	add	r22, r22
    1572:	77 1f       	adc	r23, r23
    1574:	88 1f       	adc	r24, r24
    1576:	da f7       	brpl	.-10     	; 0x156e <log+0x1e>
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	40 e8       	ldi	r20, 0x80	; 128
    157e:	5f eb       	ldi	r21, 0xBF	; 191
    1580:	9f e3       	ldi	r25, 0x3F	; 63
    1582:	88 39       	cpi	r24, 0x98	; 152
    1584:	20 f0       	brcs	.+8      	; 0x158e <log+0x3e>
    1586:	80 3e       	cpi	r24, 0xE0	; 224
    1588:	38 f0       	brcs	.+14     	; 0x1598 <log+0x48>
    158a:	21 96       	adiw	r28, 0x01	; 1
    158c:	8f 77       	andi	r24, 0x7F	; 127
    158e:	0e 94 35 07 	call	0xe6a	; 0xe6a <__addsf3>
    1592:	ee ea       	ldi	r30, 0xAE	; 174
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	04 c0       	rjmp	.+8      	; 0x15a0 <log+0x50>
    1598:	0e 94 35 07 	call	0xe6a	; 0xe6a <__addsf3>
    159c:	eb ed       	ldi	r30, 0xDB	; 219
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__fp_powser>
    15a4:	8b 01       	movw	r16, r22
    15a6:	be 01       	movw	r22, r28
    15a8:	ec 01       	movw	r28, r24
    15aa:	fb 2e       	mov	r15, r27
    15ac:	6f 57       	subi	r22, 0x7F	; 127
    15ae:	71 09       	sbc	r23, r1
    15b0:	75 95       	asr	r23
    15b2:	77 1f       	adc	r23, r23
    15b4:	88 0b       	sbc	r24, r24
    15b6:	99 0b       	sbc	r25, r25
    15b8:	0e 94 44 08 	call	0x1088	; 0x1088 <__floatsisf>
    15bc:	28 e1       	ldi	r18, 0x18	; 24
    15be:	32 e7       	ldi	r19, 0x72	; 114
    15c0:	41 e3       	ldi	r20, 0x31	; 49
    15c2:	5f e3       	ldi	r21, 0x3F	; 63
    15c4:	0e 94 0c 09 	call	0x1218	; 0x1218 <__mulsf3x>
    15c8:	af 2d       	mov	r26, r15
    15ca:	98 01       	movw	r18, r16
    15cc:	ae 01       	movw	r20, r28
    15ce:	ff 90       	pop	r15
    15d0:	0f 91       	pop	r16
    15d2:	1f 91       	pop	r17
    15d4:	cf 91       	pop	r28
    15d6:	df 91       	pop	r29
    15d8:	0e 94 4c 07 	call	0xe98	; 0xe98 <__addsf3x>
    15dc:	0c 94 ba 08 	jmp	0x1174	; 0x1174 <__fp_round>

000015e0 <modf>:
    15e0:	fa 01       	movw	r30, r20
    15e2:	dc 01       	movw	r26, r24
    15e4:	aa 0f       	add	r26, r26
    15e6:	bb 1f       	adc	r27, r27
    15e8:	9b 01       	movw	r18, r22
    15ea:	ac 01       	movw	r20, r24
    15ec:	bf 57       	subi	r27, 0x7F	; 127
    15ee:	28 f4       	brcc	.+10     	; 0x15fa <modf+0x1a>
    15f0:	22 27       	eor	r18, r18
    15f2:	33 27       	eor	r19, r19
    15f4:	44 27       	eor	r20, r20
    15f6:	50 78       	andi	r21, 0x80	; 128
    15f8:	20 c0       	rjmp	.+64     	; 0x163a <modf+0x5a>
    15fa:	b7 51       	subi	r27, 0x17	; 23
    15fc:	90 f4       	brcc	.+36     	; 0x1622 <modf+0x42>
    15fe:	ab 2f       	mov	r26, r27
    1600:	00 24       	eor	r0, r0
    1602:	46 95       	lsr	r20
    1604:	37 95       	ror	r19
    1606:	27 95       	ror	r18
    1608:	01 1c       	adc	r0, r1
    160a:	a3 95       	inc	r26
    160c:	d2 f3       	brmi	.-12     	; 0x1602 <modf+0x22>
    160e:	00 20       	and	r0, r0
    1610:	71 f0       	breq	.+28     	; 0x162e <modf+0x4e>
    1612:	22 0f       	add	r18, r18
    1614:	33 1f       	adc	r19, r19
    1616:	44 1f       	adc	r20, r20
    1618:	b3 95       	inc	r27
    161a:	da f3       	brmi	.-10     	; 0x1612 <modf+0x32>
    161c:	0e d0       	rcall	.+28     	; 0x163a <modf+0x5a>
    161e:	0c 94 34 07 	jmp	0xe68	; 0xe68 <__subsf3>
    1622:	61 30       	cpi	r22, 0x01	; 1
    1624:	71 05       	cpc	r23, r1
    1626:	a0 e8       	ldi	r26, 0x80	; 128
    1628:	8a 07       	cpc	r24, r26
    162a:	b9 46       	sbci	r27, 0x69	; 105
    162c:	30 f4       	brcc	.+12     	; 0x163a <modf+0x5a>
    162e:	9b 01       	movw	r18, r22
    1630:	ac 01       	movw	r20, r24
    1632:	66 27       	eor	r22, r22
    1634:	77 27       	eor	r23, r23
    1636:	88 27       	eor	r24, r24
    1638:	90 78       	andi	r25, 0x80	; 128
    163a:	30 96       	adiw	r30, 0x00	; 0
    163c:	21 f0       	breq	.+8      	; 0x1646 <modf+0x66>
    163e:	20 83       	st	Z, r18
    1640:	31 83       	std	Z+1, r19	; 0x01
    1642:	42 83       	std	Z+2, r20	; 0x02
    1644:	53 83       	std	Z+3, r21	; 0x03
    1646:	08 95       	ret

00001648 <__fp_mpack>:
    1648:	9f 3f       	cpi	r25, 0xFF	; 255
    164a:	31 f0       	breq	.+12     	; 0x1658 <__fp_mpack_finite+0xc>

0000164c <__fp_mpack_finite>:
    164c:	91 50       	subi	r25, 0x01	; 1
    164e:	20 f4       	brcc	.+8      	; 0x1658 <__fp_mpack_finite+0xc>
    1650:	87 95       	ror	r24
    1652:	77 95       	ror	r23
    1654:	67 95       	ror	r22
    1656:	b7 95       	ror	r27
    1658:	88 0f       	add	r24, r24
    165a:	91 1d       	adc	r25, r1
    165c:	96 95       	lsr	r25
    165e:	87 95       	ror	r24
    1660:	97 f9       	bld	r25, 7
    1662:	08 95       	ret

00001664 <__fp_powsodd>:
    1664:	9f 93       	push	r25
    1666:	8f 93       	push	r24
    1668:	7f 93       	push	r23
    166a:	6f 93       	push	r22
    166c:	ff 93       	push	r31
    166e:	ef 93       	push	r30
    1670:	9b 01       	movw	r18, r22
    1672:	ac 01       	movw	r20, r24
    1674:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__mulsf3>
    1678:	ef 91       	pop	r30
    167a:	ff 91       	pop	r31
    167c:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__fp_powser>
    1680:	2f 91       	pop	r18
    1682:	3f 91       	pop	r19
    1684:	4f 91       	pop	r20
    1686:	5f 91       	pop	r21
    1688:	0c 94 f9 08 	jmp	0x11f2	; 0x11f2 <__mulsf3>

0000168c <__udivmodsi4>:
    168c:	a1 e2       	ldi	r26, 0x21	; 33
    168e:	1a 2e       	mov	r1, r26
    1690:	aa 1b       	sub	r26, r26
    1692:	bb 1b       	sub	r27, r27
    1694:	fd 01       	movw	r30, r26
    1696:	0d c0       	rjmp	.+26     	; 0x16b2 <__udivmodsi4_ep>

00001698 <__udivmodsi4_loop>:
    1698:	aa 1f       	adc	r26, r26
    169a:	bb 1f       	adc	r27, r27
    169c:	ee 1f       	adc	r30, r30
    169e:	ff 1f       	adc	r31, r31
    16a0:	a2 17       	cp	r26, r18
    16a2:	b3 07       	cpc	r27, r19
    16a4:	e4 07       	cpc	r30, r20
    16a6:	f5 07       	cpc	r31, r21
    16a8:	20 f0       	brcs	.+8      	; 0x16b2 <__udivmodsi4_ep>
    16aa:	a2 1b       	sub	r26, r18
    16ac:	b3 0b       	sbc	r27, r19
    16ae:	e4 0b       	sbc	r30, r20
    16b0:	f5 0b       	sbc	r31, r21

000016b2 <__udivmodsi4_ep>:
    16b2:	66 1f       	adc	r22, r22
    16b4:	77 1f       	adc	r23, r23
    16b6:	88 1f       	adc	r24, r24
    16b8:	99 1f       	adc	r25, r25
    16ba:	1a 94       	dec	r1
    16bc:	69 f7       	brne	.-38     	; 0x1698 <__udivmodsi4_loop>
    16be:	60 95       	com	r22
    16c0:	70 95       	com	r23
    16c2:	80 95       	com	r24
    16c4:	90 95       	com	r25
    16c6:	9b 01       	movw	r18, r22
    16c8:	ac 01       	movw	r20, r24
    16ca:	bd 01       	movw	r22, r26
    16cc:	cf 01       	movw	r24, r30
    16ce:	08 95       	ret

000016d0 <__divmodsi4>:
    16d0:	05 2e       	mov	r0, r21
    16d2:	97 fb       	bst	r25, 7
    16d4:	1e f4       	brtc	.+6      	; 0x16dc <__divmodsi4+0xc>
    16d6:	00 94       	com	r0
    16d8:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__negsi2>
    16dc:	57 fd       	sbrc	r21, 7
    16de:	07 d0       	rcall	.+14     	; 0x16ee <__divmodsi4_neg2>
    16e0:	0e 94 46 0b 	call	0x168c	; 0x168c <__udivmodsi4>
    16e4:	07 fc       	sbrc	r0, 7
    16e6:	03 d0       	rcall	.+6      	; 0x16ee <__divmodsi4_neg2>
    16e8:	4e f4       	brtc	.+18     	; 0x16fc <__divmodsi4_exit>
    16ea:	0c 94 7f 0b 	jmp	0x16fe	; 0x16fe <__negsi2>

000016ee <__divmodsi4_neg2>:
    16ee:	50 95       	com	r21
    16f0:	40 95       	com	r20
    16f2:	30 95       	com	r19
    16f4:	21 95       	neg	r18
    16f6:	3f 4f       	sbci	r19, 0xFF	; 255
    16f8:	4f 4f       	sbci	r20, 0xFF	; 255
    16fa:	5f 4f       	sbci	r21, 0xFF	; 255

000016fc <__divmodsi4_exit>:
    16fc:	08 95       	ret

000016fe <__negsi2>:
    16fe:	90 95       	com	r25
    1700:	80 95       	com	r24
    1702:	70 95       	com	r23
    1704:	61 95       	neg	r22
    1706:	7f 4f       	sbci	r23, 0xFF	; 255
    1708:	8f 4f       	sbci	r24, 0xFF	; 255
    170a:	9f 4f       	sbci	r25, 0xFF	; 255
    170c:	08 95       	ret

0000170e <__usmulhisi3>:
    170e:	0e 94 94 0b 	call	0x1728	; 0x1728 <__umulhisi3>

00001712 <__usmulhisi3_tail>:
    1712:	b7 ff       	sbrs	r27, 7
    1714:	08 95       	ret
    1716:	82 1b       	sub	r24, r18
    1718:	93 0b       	sbc	r25, r19
    171a:	08 95       	ret

0000171c <__tablejump2__>:
    171c:	ee 0f       	add	r30, r30
    171e:	ff 1f       	adc	r31, r31
    1720:	05 90       	lpm	r0, Z+
    1722:	f4 91       	lpm	r31, Z
    1724:	e0 2d       	mov	r30, r0
    1726:	09 94       	ijmp

00001728 <__umulhisi3>:
    1728:	a2 9f       	mul	r26, r18
    172a:	b0 01       	movw	r22, r0
    172c:	b3 9f       	mul	r27, r19
    172e:	c0 01       	movw	r24, r0
    1730:	a3 9f       	mul	r26, r19
    1732:	70 0d       	add	r23, r0
    1734:	81 1d       	adc	r24, r1
    1736:	11 24       	eor	r1, r1
    1738:	91 1d       	adc	r25, r1
    173a:	b2 9f       	mul	r27, r18
    173c:	70 0d       	add	r23, r0
    173e:	81 1d       	adc	r24, r1
    1740:	11 24       	eor	r1, r1
    1742:	91 1d       	adc	r25, r1
    1744:	08 95       	ret

00001746 <_exit>:
    1746:	f8 94       	cli

00001748 <__stop_program>:
    1748:	ff cf       	rjmp	.-2      	; 0x1748 <__stop_program>
